// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

#![allow(
  non_camel_case_types,
  unused,
  non_snake_case,
  clippy::needless_return,
  clippy::redundant_closure_call,
  clippy::redundant_closure,
  clippy::useless_conversion,
  clippy::unit_arg,
  clippy::unused_unit,
  clippy::double_parens,
  clippy::let_and_return,
  clippy::too_many_arguments,
  clippy::match_single_binding,
  clippy::clone_on_copy,
  clippy::let_unit_value,
  clippy::deref_addrof,
  clippy::explicit_auto_deref,
  clippy::borrow_deref_ref,
  clippy::needless_borrow
)]

// Section: imports

use crate::infra::DataSchemeExtensions;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(default_stream_sink_codec = SseCodec, default_rust_opaque = RustOpaqueMoi, default_rust_auto_opaque = RustAutoOpaqueMoi,);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1749990834;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__infra__init_app_impl(port_: flutter_rust_bridge::for_generated::MessagePort, ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr, rust_vec_len_: i32, data_len_: i32) {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "init_app",
      port: Some(port_),
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      move |context| {
        transform_result_sse::<_, ()>((move || {
          let output_ok = Result::<_, ()>::Ok({
            crate::infra::init_app();
          })?;
          Ok(output_ok)
        })())
      }
    },
  )
}
fn wire__crate__infra__tms_tree_role_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr, rust_vec_len_: i32, data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_tree_role_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::TmsTreeRole::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__tms_tree_role_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr, rust_vec_len_: i32, data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_tree_role_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::TmsTreeRole>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::TmsTreeRole::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__tms_tree_role_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr, rust_vec_len_: i32, data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_tree_role_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::TmsTreeRole::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__date_time__tms_date_time_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_date_time_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::date_time::TmsDateTime::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__date_time__tms_date_time_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_date_time_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::database_schemas::date_time::TmsDateTime>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::date_time::TmsDateTime::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__date_time__tms_date_time_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_date_time_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::date_time::TmsDateTime::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__game_match__game_match_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "game_match_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::game_match::GameMatch::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__game_match__game_match_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "game_match_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::database_schemas::game_match::GameMatch>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::game_match::GameMatch::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__game_match__game_match_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "game_match_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::game_match::GameMatch::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__game_table__game_table_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "game_table_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::game_table::GameTable::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__game_table__game_table_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "game_table_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::database_schemas::game_table::GameTable>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::game_table::GameTable::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__game_table__game_table_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "game_table_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::game_table::GameTable::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__judging_pod__judging_pod_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "judging_pod_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::judging_pod::JudgingPod::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__judging_pod__judging_pod_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "judging_pod_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::database_schemas::judging_pod::JudgingPod>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::judging_pod::JudgingPod::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__judging_pod__judging_pod_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "judging_pod_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::judging_pod::JudgingPod::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__judging_session__judging_session_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "judging_session_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::judging_session::JudgingSession::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__judging_session__judging_session_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "judging_session_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::database_schemas::judging_session::JudgingSession>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::judging_session::JudgingSession::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__judging_session__judging_session_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "judging_session_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::judging_session::JudgingSession::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__team__team_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "team_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::team::Team::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__team__team_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "team_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::database_schemas::team::Team>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::team::Team::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__team__team_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr, rust_vec_len_: i32, data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "team_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::team::Team::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__tournament_config__tournament_config_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::tournament_config::TournamentConfig::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__tournament_config__tournament_config_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::database_schemas::tournament_config::TournamentConfig>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::tournament_config::TournamentConfig::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__tournament_config__tournament_config_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::tournament_config::TournamentConfig::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__user__user_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "user_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::user::User::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__user__user_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "user_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::database_schemas::user::User>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::user::User::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__database_schemas__user__user_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr, rust_vec_len_: i32, data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "user_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::database_schemas::user::User::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__errors__error_message_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "error_message_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::errors::ErrorMessage::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__errors__error_message_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "error_message_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::errors::ErrorMessage>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::errors::ErrorMessage::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__errors__error_message_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "error_message_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::errors::ErrorMessage::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__login_requests__login_request_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "login_request_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::login_requests::LoginRequest::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__login_requests__login_request_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "login_request_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::login_requests::LoginRequest>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::login_requests::LoginRequest::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__login_requests__login_request_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "login_request_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::login_requests::LoginRequest::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__login_requests__login_response_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "login_response_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::login_requests::LoginResponse::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__login_requests__login_response_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "login_response_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::login_requests::LoginResponse>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::login_requests::LoginResponse::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__login_requests__login_response_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "login_response_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::login_requests::LoginResponse::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__register_requests__register_request_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "register_request_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::register_requests::RegisterRequest::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__register_requests__register_request_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "register_request_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::register_requests::RegisterRequest>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::register_requests::RegisterRequest::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__register_requests__register_request_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "register_request_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::register_requests::RegisterRequest::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__register_requests__register_response_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "register_response_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::register_requests::RegisterResponse::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__register_requests__register_response_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "register_response_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::register_requests::RegisterResponse>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::register_requests::RegisterResponse::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__register_requests__register_response_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "register_response_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::register_requests::RegisterResponse::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "robot_games_load_match_request_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "robot_games_load_match_request_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "robot_games_load_match_request_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_state_event_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_server_match_state_event_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_state_event_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_server_match_state_event_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_state_event_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_server_match_state_event_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_timer_time_event_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_server_match_timer_time_event_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_timer_time_event_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_server_match_timer_time_event_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_timer_time_event_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_server_match_timer_time_event_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_server_socket_message_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_server_socket_message_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tms_server_socket_message_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_backup_interval_request_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_backup_interval_request_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_backup_interval_request_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_endgame_timer_length_request_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_endgame_timer_length_request_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_endgame_timer_length_request_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_name_request_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_name_request_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_name_request_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_retain_backups_request_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_retain_backups_request_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_retain_backups_request_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_season_request_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_season_request_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_season_request_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_from_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_timer_length_request_from_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_json = <String>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest::from_json_string(&api_json))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_to_json_string_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_timer_length_request_to_json_string",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest>::sse_decode(&mut deserializer);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest::to_json_string(&api_that))?;
        Ok(output_ok)
      })())
    },
  )
}
fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_to_schema_impl(
  ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
  rust_vec_len_: i32,
  data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
    flutter_rust_bridge::for_generated::TaskInfo {
      debug_name: "tournament_config_set_timer_length_request_to_schema",
      port: None,
      mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
    },
    move || {
      let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
      let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
      deserializer.end();
      transform_result_sse::<_, ()>((move || {
        let output_ok = Result::<_, ()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest::to_schema())?;
        Ok(output_ok)
      })())
    },
  )
}

// Section: dart2rust

impl SseDecode for String {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut inner = <Vec<u8>>::sse_decode(deserializer);
    return String::from_utf8(inner).unwrap();
  }
}

impl SseDecode for bool {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    deserializer.cursor.read_u8().unwrap() != 0
  }
}

impl SseDecode for crate::infra::network_schemas::errors::ErrorMessage {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_code = <u16>::sse_decode(deserializer);
    let mut var_message = <String>::sse_decode(deserializer);
    return crate::infra::network_schemas::errors::ErrorMessage { code: var_code, message: var_message };
  }
}

impl SseDecode for crate::infra::database_schemas::game_match::GameMatch {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_matchNumber = <String>::sse_decode(deserializer);
    let mut var_startTime = <crate::infra::database_schemas::date_time::TmsDateTime>::sse_decode(deserializer);
    let mut var_endTime = <crate::infra::database_schemas::date_time::TmsDateTime>::sse_decode(deserializer);
    let mut var_gameMatchTables = <Vec<crate::infra::database_schemas::game_match::GameMatchTable>>::sse_decode(deserializer);
    let mut var_completed = <bool>::sse_decode(deserializer);
    return crate::infra::database_schemas::game_match::GameMatch {
      match_number: var_matchNumber,
      start_time: var_startTime,
      end_time: var_endTime,
      game_match_tables: var_gameMatchTables,
      completed: var_completed,
    };
  }
}

impl SseDecode for crate::infra::database_schemas::game_match::GameMatchTable {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_table = <String>::sse_decode(deserializer);
    let mut var_teamNumber = <String>::sse_decode(deserializer);
    let mut var_scoreSubmitted = <bool>::sse_decode(deserializer);
    return crate::infra::database_schemas::game_match::GameMatchTable {
      table: var_table,
      team_number: var_teamNumber,
      score_submitted: var_scoreSubmitted,
    };
  }
}

impl SseDecode for crate::infra::database_schemas::game_table::GameTable {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_tableName = <String>::sse_decode(deserializer);
    return crate::infra::database_schemas::game_table::GameTable { table_name: var_tableName };
  }
}

impl SseDecode for i32 {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    deserializer.cursor.read_i32::<NativeEndian>().unwrap()
  }
}

impl SseDecode for crate::infra::database_schemas::judging_pod::JudgingPod {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_podName = <String>::sse_decode(deserializer);
    return crate::infra::database_schemas::judging_pod::JudgingPod { pod_name: var_podName };
  }
}

impl SseDecode for crate::infra::database_schemas::judging_session::JudgingSession {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_sessionNumber = <String>::sse_decode(deserializer);
    let mut var_startTime = <crate::infra::database_schemas::date_time::TmsDateTime>::sse_decode(deserializer);
    let mut var_endTime = <crate::infra::database_schemas::date_time::TmsDateTime>::sse_decode(deserializer);
    let mut var_judgingSessionPods = <Vec<crate::infra::database_schemas::judging_session::JudgingSessionPod>>::sse_decode(deserializer);
    return crate::infra::database_schemas::judging_session::JudgingSession {
      session_number: var_sessionNumber,
      start_time: var_startTime,
      end_time: var_endTime,
      judging_session_pods: var_judgingSessionPods,
    };
  }
}

impl SseDecode for crate::infra::database_schemas::judging_session::JudgingSessionPod {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_pod = <String>::sse_decode(deserializer);
    let mut var_teamNumber = <String>::sse_decode(deserializer);
    let mut var_coreValuesSubmitted = <bool>::sse_decode(deserializer);
    let mut var_innovationSubmitted = <bool>::sse_decode(deserializer);
    let mut var_robotDesignSubmitted = <bool>::sse_decode(deserializer);
    return crate::infra::database_schemas::judging_session::JudgingSessionPod {
      pod: var_pod,
      team_number: var_teamNumber,
      core_values_submitted: var_coreValuesSubmitted,
      innovation_submitted: var_innovationSubmitted,
      robot_design_submitted: var_robotDesignSubmitted,
    };
  }
}

impl SseDecode for Vec<String> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut len_ = <i32>::sse_decode(deserializer);
    let mut ans_ = vec![];
    for idx_ in 0..len_ {
      ans_.push(<String>::sse_decode(deserializer));
    }
    return ans_;
  }
}

impl SseDecode for Vec<crate::infra::database_schemas::game_match::GameMatchTable> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut len_ = <i32>::sse_decode(deserializer);
    let mut ans_ = vec![];
    for idx_ in 0..len_ {
      ans_.push(<crate::infra::database_schemas::game_match::GameMatchTable>::sse_decode(deserializer));
    }
    return ans_;
  }
}

impl SseDecode for Vec<crate::infra::database_schemas::judging_session::JudgingSessionPod> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut len_ = <i32>::sse_decode(deserializer);
    let mut ans_ = vec![];
    for idx_ in 0..len_ {
      ans_.push(<crate::infra::database_schemas::judging_session::JudgingSessionPod>::sse_decode(deserializer));
    }
    return ans_;
  }
}

impl SseDecode for Vec<u8> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut len_ = <i32>::sse_decode(deserializer);
    let mut ans_ = vec![];
    for idx_ in 0..len_ {
      ans_.push(<u8>::sse_decode(deserializer));
    }
    return ans_;
  }
}

impl SseDecode for Vec<(String, bool)> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut len_ = <i32>::sse_decode(deserializer);
    let mut ans_ = vec![];
    for idx_ in 0..len_ {
      ans_.push(<(String, bool)>::sse_decode(deserializer));
    }
    return ans_;
  }
}

impl SseDecode for Vec<crate::infra::TmsTreeRole> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut len_ = <i32>::sse_decode(deserializer);
    let mut ans_ = vec![];
    for idx_ in 0..len_ {
      ans_.push(<crate::infra::TmsTreeRole>::sse_decode(deserializer));
    }
    return ans_;
  }
}

impl SseDecode for crate::infra::network_schemas::login_requests::LoginRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_username = <String>::sse_decode(deserializer);
    let mut var_password = <String>::sse_decode(deserializer);
    return crate::infra::network_schemas::login_requests::LoginRequest {
      username: var_username,
      password: var_password,
    };
  }
}

impl SseDecode for crate::infra::network_schemas::login_requests::LoginResponse {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_roles = <Vec<crate::infra::TmsTreeRole>>::sse_decode(deserializer);
    return crate::infra::network_schemas::login_requests::LoginResponse { roles: var_roles };
  }
}

impl SseDecode for Option<String> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    if (<bool>::sse_decode(deserializer)) {
      return Some(<String>::sse_decode(deserializer));
    } else {
      return None;
    }
  }
}

impl SseDecode for Option<crate::infra::database_schemas::date_time::TmsDate> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    if (<bool>::sse_decode(deserializer)) {
      return Some(<crate::infra::database_schemas::date_time::TmsDate>::sse_decode(deserializer));
    } else {
      return None;
    }
  }
}

impl SseDecode for Option<crate::infra::database_schemas::date_time::TmsTime> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    if (<bool>::sse_decode(deserializer)) {
      return Some(<crate::infra::database_schemas::date_time::TmsTime>::sse_decode(deserializer));
    } else {
      return None;
    }
  }
}

impl SseDecode for (String, bool) {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_field0 = <String>::sse_decode(deserializer);
    let mut var_field1 = <bool>::sse_decode(deserializer);
    return (var_field0, var_field1);
  }
}

impl SseDecode for crate::infra::network_schemas::register_requests::RegisterRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_username = <Option<String>>::sse_decode(deserializer);
    let mut var_password = <Option<String>>::sse_decode(deserializer);
    return crate::infra::network_schemas::register_requests::RegisterRequest {
      username: var_username,
      password: var_password,
    };
  }
}

impl SseDecode for crate::infra::network_schemas::register_requests::RegisterResponse {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_authToken = <String>::sse_decode(deserializer);
    let mut var_uuid = <String>::sse_decode(deserializer);
    let mut var_url = <String>::sse_decode(deserializer);
    let mut var_serverIp = <String>::sse_decode(deserializer);
    let mut var_roles = <Vec<crate::infra::TmsTreeRole>>::sse_decode(deserializer);
    return crate::infra::network_schemas::register_requests::RegisterResponse {
      auth_token: var_authToken,
      uuid: var_uuid,
      url: var_url,
      server_ip: var_serverIp,
      roles: var_roles,
    };
  }
}

impl SseDecode for crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_gameMatchNumbers = <Vec<String>>::sse_decode(deserializer);
    return crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest { game_match_numbers: var_gameMatchNumbers };
  }
}

impl SseDecode for crate::infra::database_schemas::team::Team {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_cloudId = <String>::sse_decode(deserializer);
    let mut var_number = <String>::sse_decode(deserializer);
    let mut var_name = <String>::sse_decode(deserializer);
    let mut var_affiliation = <String>::sse_decode(deserializer);
    let mut var_ranking = <u32>::sse_decode(deserializer);
    return crate::infra::database_schemas::team::Team {
      cloud_id: var_cloudId,
      number: var_number,
      name: var_name,
      affiliation: var_affiliation,
      ranking: var_ranking,
    };
  }
}

impl SseDecode for crate::infra::database_schemas::date_time::TmsDate {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_year = <i32>::sse_decode(deserializer);
    let mut var_month = <u32>::sse_decode(deserializer);
    let mut var_day = <u32>::sse_decode(deserializer);
    return crate::infra::database_schemas::date_time::TmsDate {
      year: var_year,
      month: var_month,
      day: var_day,
    };
  }
}

impl SseDecode for crate::infra::database_schemas::date_time::TmsDateTime {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_date = <Option<crate::infra::database_schemas::date_time::TmsDate>>::sse_decode(deserializer);
    let mut var_time = <Option<crate::infra::database_schemas::date_time::TmsTime>>::sse_decode(deserializer);
    return crate::infra::database_schemas::date_time::TmsDateTime { date: var_date, time: var_time };
  }
}

impl SseDecode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut inner = <i32>::sse_decode(deserializer);
    return match inner {
      0 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState::Running,
      1 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState::Ready,
      2 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState::Load,
      3 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState::Unload,
      _ => unreachable!("Invalid variant for TmsServerMatchState: {}", inner),
    };
  }
}

impl SseDecode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_state = <crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState>::sse_decode(deserializer);
    let mut var_gameMatchTables = <Vec<(String, bool)>>::sse_decode(deserializer);
    let mut var_gameMatchNumbers = <Vec<String>>::sse_decode(deserializer);
    return crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent {
      state: var_state,
      game_match_tables: var_gameMatchTables,
      game_match_numbers: var_gameMatchNumbers,
    };
  }
}

impl SseDecode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_time = <u32>::sse_decode(deserializer);
    return crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent { time: var_time };
  }
}

impl SseDecode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut inner = <i32>::sse_decode(deserializer);
    return match inner {
      0 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::PurgeEvent,
      1 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerStartCountdownEvent,
      2 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerStartEvent,
      3 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerTimeEvent,
      4 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerEndgameEvent,
      5 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerEndEvent,
      6 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerStopEvent,
      7 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerReloadEvent,
      8 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchStateEvent,
      _ => unreachable!("Invalid variant for TmsServerSocketEvent: {}", inner),
    };
  }
}

impl SseDecode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_authToken = <String>::sse_decode(deserializer);
    let mut var_messageEvent = <crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent>::sse_decode(deserializer);
    let mut var_message = <Option<String>>::sse_decode(deserializer);
    return crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
      auth_token: var_authToken,
      message_event: var_messageEvent,
      message: var_message,
    };
  }
}

impl SseDecode for crate::infra::database_schemas::date_time::TmsTime {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_hour = <u32>::sse_decode(deserializer);
    let mut var_minute = <u32>::sse_decode(deserializer);
    let mut var_second = <u32>::sse_decode(deserializer);
    return crate::infra::database_schemas::date_time::TmsTime {
      hour: var_hour,
      minute: var_minute,
      second: var_second,
    };
  }
}

impl SseDecode for crate::infra::TmsTreeRole {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_roleId = <String>::sse_decode(deserializer);
    let mut var_password = <String>::sse_decode(deserializer);
    let mut var_readEchoTrees = <Vec<String>>::sse_decode(deserializer);
    let mut var_readWriteEchoTrees = <Vec<String>>::sse_decode(deserializer);
    return crate::infra::TmsTreeRole {
      role_id: var_roleId,
      password: var_password,
      read_echo_trees: var_readEchoTrees,
      read_write_echo_trees: var_readWriteEchoTrees,
    };
  }
}

impl SseDecode for crate::infra::database_schemas::tournament_config::TournamentConfig {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_name = <String>::sse_decode(deserializer);
    let mut var_backupInterval = <u32>::sse_decode(deserializer);
    let mut var_retainBackups = <u32>::sse_decode(deserializer);
    let mut var_endGameTimerLength = <u32>::sse_decode(deserializer);
    let mut var_timerLength = <u32>::sse_decode(deserializer);
    let mut var_season = <String>::sse_decode(deserializer);
    return crate::infra::database_schemas::tournament_config::TournamentConfig {
      name: var_name,
      backup_interval: var_backupInterval,
      retain_backups: var_retainBackups,
      end_game_timer_length: var_endGameTimerLength,
      timer_length: var_timerLength,
      season: var_season,
    };
  }
}

impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_interval = <u32>::sse_decode(deserializer);
    return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest { interval: var_interval };
  }
}

impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_timerLength = <u32>::sse_decode(deserializer);
    return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest { timer_length: var_timerLength };
  }
}

impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_name = <String>::sse_decode(deserializer);
    return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest { name: var_name };
  }
}

impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_retainBackups = <u32>::sse_decode(deserializer);
    return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest { retain_backups: var_retainBackups };
  }
}

impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_season = <String>::sse_decode(deserializer);
    return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest { season: var_season };
  }
}

impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_timerLength = <u32>::sse_decode(deserializer);
    return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest { timer_length: var_timerLength };
  }
}

impl SseDecode for u16 {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    deserializer.cursor.read_u16::<NativeEndian>().unwrap()
  }
}

impl SseDecode for u32 {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    deserializer.cursor.read_u32::<NativeEndian>().unwrap()
  }
}

impl SseDecode for u8 {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    deserializer.cursor.read_u8().unwrap()
  }
}

impl SseDecode for () {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for crate::infra::database_schemas::user::User {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
    let mut var_username = <String>::sse_decode(deserializer);
    let mut var_password = <String>::sse_decode(deserializer);
    let mut var_roles = <Vec<String>>::sse_decode(deserializer);
    return crate::infra::database_schemas::user::User {
      username: var_username,
      password: var_password,
      roles: var_roles,
    };
  }
}

fn pde_ffi_dispatcher_primary_impl(func_id: i32, port: flutter_rust_bridge::for_generated::MessagePort, ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr, rust_vec_len: i32, data_len: i32) {
  // Codec=Pde (Serialization + dispatch), see doc to use other codecs
  match func_id {
    4 => wire__crate__infra__init_app_impl(port, ptr, rust_vec_len, data_len),
    _ => unreachable!(),
  }
}

fn pde_ffi_dispatcher_sync_impl(func_id: i32, ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr, rust_vec_len: i32, data_len: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
  // Codec=Pde (Serialization + dispatch), see doc to use other codecs
  match func_id {
    5 => wire__crate__infra__tms_tree_role_from_json_string_impl(ptr, rust_vec_len, data_len),
    6 => wire__crate__infra__tms_tree_role_to_json_string_impl(ptr, rust_vec_len, data_len),
    7 => wire__crate__infra__tms_tree_role_to_schema_impl(ptr, rust_vec_len, data_len),
    8 => wire__crate__infra__database_schemas__date_time__tms_date_time_from_json_string_impl(ptr, rust_vec_len, data_len),
    9 => wire__crate__infra__database_schemas__date_time__tms_date_time_to_json_string_impl(ptr, rust_vec_len, data_len),
    10 => wire__crate__infra__database_schemas__date_time__tms_date_time_to_schema_impl(ptr, rust_vec_len, data_len),
    11 => wire__crate__infra__database_schemas__game_match__game_match_from_json_string_impl(ptr, rust_vec_len, data_len),
    12 => wire__crate__infra__database_schemas__game_match__game_match_to_json_string_impl(ptr, rust_vec_len, data_len),
    13 => wire__crate__infra__database_schemas__game_match__game_match_to_schema_impl(ptr, rust_vec_len, data_len),
    14 => wire__crate__infra__database_schemas__game_table__game_table_from_json_string_impl(ptr, rust_vec_len, data_len),
    15 => wire__crate__infra__database_schemas__game_table__game_table_to_json_string_impl(ptr, rust_vec_len, data_len),
    16 => wire__crate__infra__database_schemas__game_table__game_table_to_schema_impl(ptr, rust_vec_len, data_len),
    17 => wire__crate__infra__database_schemas__judging_pod__judging_pod_from_json_string_impl(ptr, rust_vec_len, data_len),
    18 => wire__crate__infra__database_schemas__judging_pod__judging_pod_to_json_string_impl(ptr, rust_vec_len, data_len),
    19 => wire__crate__infra__database_schemas__judging_pod__judging_pod_to_schema_impl(ptr, rust_vec_len, data_len),
    20 => wire__crate__infra__database_schemas__judging_session__judging_session_from_json_string_impl(ptr, rust_vec_len, data_len),
    21 => wire__crate__infra__database_schemas__judging_session__judging_session_to_json_string_impl(ptr, rust_vec_len, data_len),
    22 => wire__crate__infra__database_schemas__judging_session__judging_session_to_schema_impl(ptr, rust_vec_len, data_len),
    23 => wire__crate__infra__database_schemas__team__team_from_json_string_impl(ptr, rust_vec_len, data_len),
    24 => wire__crate__infra__database_schemas__team__team_to_json_string_impl(ptr, rust_vec_len, data_len),
    25 => wire__crate__infra__database_schemas__team__team_to_schema_impl(ptr, rust_vec_len, data_len),
    26 => wire__crate__infra__database_schemas__tournament_config__tournament_config_from_json_string_impl(ptr, rust_vec_len, data_len),
    27 => wire__crate__infra__database_schemas__tournament_config__tournament_config_to_json_string_impl(ptr, rust_vec_len, data_len),
    28 => wire__crate__infra__database_schemas__tournament_config__tournament_config_to_schema_impl(ptr, rust_vec_len, data_len),
    29 => wire__crate__infra__database_schemas__user__user_from_json_string_impl(ptr, rust_vec_len, data_len),
    30 => wire__crate__infra__database_schemas__user__user_to_json_string_impl(ptr, rust_vec_len, data_len),
    31 => wire__crate__infra__database_schemas__user__user_to_schema_impl(ptr, rust_vec_len, data_len),
    32 => wire__crate__infra__network_schemas__errors__error_message_from_json_string_impl(ptr, rust_vec_len, data_len),
    33 => wire__crate__infra__network_schemas__errors__error_message_to_json_string_impl(ptr, rust_vec_len, data_len),
    34 => wire__crate__infra__network_schemas__errors__error_message_to_schema_impl(ptr, rust_vec_len, data_len),
    35 => wire__crate__infra__network_schemas__login_requests__login_request_from_json_string_impl(ptr, rust_vec_len, data_len),
    36 => wire__crate__infra__network_schemas__login_requests__login_request_to_json_string_impl(ptr, rust_vec_len, data_len),
    37 => wire__crate__infra__network_schemas__login_requests__login_request_to_schema_impl(ptr, rust_vec_len, data_len),
    38 => wire__crate__infra__network_schemas__login_requests__login_response_from_json_string_impl(ptr, rust_vec_len, data_len),
    39 => wire__crate__infra__network_schemas__login_requests__login_response_to_json_string_impl(ptr, rust_vec_len, data_len),
    40 => wire__crate__infra__network_schemas__login_requests__login_response_to_schema_impl(ptr, rust_vec_len, data_len),
    41 => wire__crate__infra__network_schemas__register_requests__register_request_from_json_string_impl(ptr, rust_vec_len, data_len),
    42 => wire__crate__infra__network_schemas__register_requests__register_request_to_json_string_impl(ptr, rust_vec_len, data_len),
    43 => wire__crate__infra__network_schemas__register_requests__register_request_to_schema_impl(ptr, rust_vec_len, data_len),
    44 => wire__crate__infra__network_schemas__register_requests__register_response_from_json_string_impl(ptr, rust_vec_len, data_len),
    45 => wire__crate__infra__network_schemas__register_requests__register_response_to_json_string_impl(ptr, rust_vec_len, data_len),
    46 => wire__crate__infra__network_schemas__register_requests__register_response_to_schema_impl(ptr, rust_vec_len, data_len),
    47 => wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_from_json_string_impl(ptr, rust_vec_len, data_len),
    48 => wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_to_json_string_impl(ptr, rust_vec_len, data_len),
    49 => wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_to_schema_impl(ptr, rust_vec_len, data_len),
    50 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_state_event_from_json_string_impl(ptr, rust_vec_len, data_len),
    51 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_state_event_to_json_string_impl(ptr, rust_vec_len, data_len),
    52 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_state_event_to_schema_impl(ptr, rust_vec_len, data_len),
    53 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_timer_time_event_from_json_string_impl(ptr, rust_vec_len, data_len),
    54 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_timer_time_event_to_json_string_impl(ptr, rust_vec_len, data_len),
    55 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_match_timer_time_event_to_schema_impl(ptr, rust_vec_len, data_len),
    56 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_from_json_string_impl(ptr, rust_vec_len, data_len),
    57 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_to_json_string_impl(ptr, rust_vec_len, data_len),
    58 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_to_schema_impl(ptr, rust_vec_len, data_len),
    59 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_from_json_string_impl(ptr, rust_vec_len, data_len),
    60 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_to_json_string_impl(ptr, rust_vec_len, data_len),
    61 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_to_schema_impl(ptr, rust_vec_len, data_len),
    62 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_from_json_string_impl(ptr, rust_vec_len, data_len),
    63 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_to_json_string_impl(ptr, rust_vec_len, data_len),
    64 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_to_schema_impl(ptr, rust_vec_len, data_len),
    65 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_from_json_string_impl(ptr, rust_vec_len, data_len),
    66 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_to_json_string_impl(ptr, rust_vec_len, data_len),
    67 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_to_schema_impl(ptr, rust_vec_len, data_len),
    68 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_from_json_string_impl(ptr, rust_vec_len, data_len),
    69 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_to_json_string_impl(ptr, rust_vec_len, data_len),
    70 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_to_schema_impl(ptr, rust_vec_len, data_len),
    71 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_from_json_string_impl(ptr, rust_vec_len, data_len),
    72 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_to_json_string_impl(ptr, rust_vec_len, data_len),
    73 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_to_schema_impl(ptr, rust_vec_len, data_len),
    74 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_from_json_string_impl(ptr, rust_vec_len, data_len),
    75 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_to_json_string_impl(ptr, rust_vec_len, data_len),
    76 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_to_schema_impl(ptr, rust_vec_len, data_len),
    _ => unreachable!(),
  }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::errors::ErrorMessage {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.code.into_into_dart().into_dart(), self.message.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::errors::ErrorMessage {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::errors::ErrorMessage> for crate::infra::network_schemas::errors::ErrorMessage {
  fn into_into_dart(self) -> crate::infra::network_schemas::errors::ErrorMessage {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::game_match::GameMatch {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [
      self.match_number.into_into_dart().into_dart(),
      self.start_time.into_into_dart().into_dart(),
      self.end_time.into_into_dart().into_dart(),
      self.game_match_tables.into_into_dart().into_dart(),
      self.completed.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::game_match::GameMatch {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::game_match::GameMatch> for crate::infra::database_schemas::game_match::GameMatch {
  fn into_into_dart(self) -> crate::infra::database_schemas::game_match::GameMatch {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::game_match::GameMatchTable {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.table.into_into_dart().into_dart(), self.team_number.into_into_dart().into_dart(), self.score_submitted.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::game_match::GameMatchTable {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::game_match::GameMatchTable> for crate::infra::database_schemas::game_match::GameMatchTable {
  fn into_into_dart(self) -> crate::infra::database_schemas::game_match::GameMatchTable {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::game_table::GameTable {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.table_name.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::game_table::GameTable {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::game_table::GameTable> for crate::infra::database_schemas::game_table::GameTable {
  fn into_into_dart(self) -> crate::infra::database_schemas::game_table::GameTable {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::judging_pod::JudgingPod {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.pod_name.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::judging_pod::JudgingPod {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::judging_pod::JudgingPod> for crate::infra::database_schemas::judging_pod::JudgingPod {
  fn into_into_dart(self) -> crate::infra::database_schemas::judging_pod::JudgingPod {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::judging_session::JudgingSession {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [
      self.session_number.into_into_dart().into_dart(),
      self.start_time.into_into_dart().into_dart(),
      self.end_time.into_into_dart().into_dart(),
      self.judging_session_pods.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::judging_session::JudgingSession {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::judging_session::JudgingSession> for crate::infra::database_schemas::judging_session::JudgingSession {
  fn into_into_dart(self) -> crate::infra::database_schemas::judging_session::JudgingSession {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::judging_session::JudgingSessionPod {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [
      self.pod.into_into_dart().into_dart(),
      self.team_number.into_into_dart().into_dart(),
      self.core_values_submitted.into_into_dart().into_dart(),
      self.innovation_submitted.into_into_dart().into_dart(),
      self.robot_design_submitted.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::judging_session::JudgingSessionPod {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::judging_session::JudgingSessionPod> for crate::infra::database_schemas::judging_session::JudgingSessionPod {
  fn into_into_dart(self) -> crate::infra::database_schemas::judging_session::JudgingSessionPod {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::login_requests::LoginRequest {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.username.into_into_dart().into_dart(), self.password.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::login_requests::LoginRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::login_requests::LoginRequest> for crate::infra::network_schemas::login_requests::LoginRequest {
  fn into_into_dart(self) -> crate::infra::network_schemas::login_requests::LoginRequest {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::login_requests::LoginResponse {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.roles.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::login_requests::LoginResponse {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::login_requests::LoginResponse> for crate::infra::network_schemas::login_requests::LoginResponse {
  fn into_into_dart(self) -> crate::infra::network_schemas::login_requests::LoginResponse {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::register_requests::RegisterRequest {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.username.into_into_dart().into_dart(), self.password.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::register_requests::RegisterRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::register_requests::RegisterRequest> for crate::infra::network_schemas::register_requests::RegisterRequest {
  fn into_into_dart(self) -> crate::infra::network_schemas::register_requests::RegisterRequest {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::register_requests::RegisterResponse {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [
      self.auth_token.into_into_dart().into_dart(),
      self.uuid.into_into_dart().into_dart(),
      self.url.into_into_dart().into_dart(),
      self.server_ip.into_into_dart().into_dart(),
      self.roles.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::register_requests::RegisterResponse {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::register_requests::RegisterResponse> for crate::infra::network_schemas::register_requests::RegisterResponse {
  fn into_into_dart(self) -> crate::infra::network_schemas::register_requests::RegisterResponse {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.game_match_numbers.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest> for crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {
  fn into_into_dart(self) -> crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::team::Team {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [
      self.cloud_id.into_into_dart().into_dart(),
      self.number.into_into_dart().into_dart(),
      self.name.into_into_dart().into_dart(),
      self.affiliation.into_into_dart().into_dart(),
      self.ranking.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::team::Team {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::team::Team> for crate::infra::database_schemas::team::Team {
  fn into_into_dart(self) -> crate::infra::database_schemas::team::Team {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::date_time::TmsDate {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.year.into_into_dart().into_dart(), self.month.into_into_dart().into_dart(), self.day.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::date_time::TmsDate {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::date_time::TmsDate> for crate::infra::database_schemas::date_time::TmsDate {
  fn into_into_dart(self) -> crate::infra::database_schemas::date_time::TmsDate {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::date_time::TmsDateTime {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.date.into_into_dart().into_dart(), self.time.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::date_time::TmsDateTime {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::date_time::TmsDateTime> for crate::infra::database_schemas::date_time::TmsDateTime {
  fn into_into_dart(self) -> crate::infra::database_schemas::date_time::TmsDateTime {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    match self {
      Self::Running => 0.into_dart(),
      Self::Ready => 1.into_dart(),
      Self::Load => 2.into_dart(),
      Self::Unload => 3.into_dart(),
      _ => unreachable!(),
    }
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState> for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState {
  fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [
      self.state.into_into_dart().into_dart(),
      self.game_match_tables.into_into_dart().into_dart(),
      self.game_match_numbers.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent> for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent {
  fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.time.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent>
  for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent
{
  fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    match self {
      Self::PurgeEvent => 0.into_dart(),
      Self::MatchTimerStartCountdownEvent => 1.into_dart(),
      Self::MatchTimerStartEvent => 2.into_dart(),
      Self::MatchTimerTimeEvent => 3.into_dart(),
      Self::MatchTimerEndgameEvent => 4.into_dart(),
      Self::MatchTimerEndEvent => 5.into_dart(),
      Self::MatchTimerStopEvent => 6.into_dart(),
      Self::MatchTimerReloadEvent => 7.into_dart(),
      Self::MatchStateEvent => 8.into_dart(),
      _ => unreachable!(),
    }
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent> for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {
  fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.auth_token.into_into_dart().into_dart(), self.message_event.into_into_dart().into_dart(), self.message.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage> for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
  fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::date_time::TmsTime {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.hour.into_into_dart().into_dart(), self.minute.into_into_dart().into_dart(), self.second.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::date_time::TmsTime {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::date_time::TmsTime> for crate::infra::database_schemas::date_time::TmsTime {
  fn into_into_dart(self) -> crate::infra::database_schemas::date_time::TmsTime {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::TmsTreeRole {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [
      self.role_id.into_into_dart().into_dart(),
      self.password.into_into_dart().into_dart(),
      self.read_echo_trees.into_into_dart().into_dart(),
      self.read_write_echo_trees.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::TmsTreeRole {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::TmsTreeRole> for crate::infra::TmsTreeRole {
  fn into_into_dart(self) -> crate::infra::TmsTreeRole {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::tournament_config::TournamentConfig {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [
      self.name.into_into_dart().into_dart(),
      self.backup_interval.into_into_dart().into_dart(),
      self.retain_backups.into_into_dart().into_dart(),
      self.end_game_timer_length.into_into_dart().into_dart(),
      self.timer_length.into_into_dart().into_dart(),
      self.season.into_into_dart().into_dart(),
    ]
    .into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::tournament_config::TournamentConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::tournament_config::TournamentConfig> for crate::infra::database_schemas::tournament_config::TournamentConfig {
  fn into_into_dart(self) -> crate::infra::database_schemas::tournament_config::TournamentConfig {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.interval.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest>
  for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest
{
  fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.timer_length.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest>
  for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest
{
  fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.name.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest> for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {
  fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.retain_backups.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest>
  for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest
{
  fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.season.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest> for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {
  fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.timer_length.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest> for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {
  fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {
    self
  }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::user::User {
  fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
    [self.username.into_into_dart().into_dart(), self.password.into_into_dart().into_dart(), self.roles.into_into_dart().into_dart()].into_dart()
  }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::user::User {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::user::User> for crate::infra::database_schemas::user::User {
  fn into_into_dart(self) -> crate::infra::database_schemas::user::User {
    self
  }
}

impl SseEncode for String {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
  }
}

impl SseEncode for bool {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    serializer.cursor.write_u8(self as _).unwrap();
  }
}

impl SseEncode for crate::infra::network_schemas::errors::ErrorMessage {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <u16>::sse_encode(self.code, serializer);
    <String>::sse_encode(self.message, serializer);
  }
}

impl SseEncode for crate::infra::database_schemas::game_match::GameMatch {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.match_number, serializer);
    <crate::infra::database_schemas::date_time::TmsDateTime>::sse_encode(self.start_time, serializer);
    <crate::infra::database_schemas::date_time::TmsDateTime>::sse_encode(self.end_time, serializer);
    <Vec<crate::infra::database_schemas::game_match::GameMatchTable>>::sse_encode(self.game_match_tables, serializer);
    <bool>::sse_encode(self.completed, serializer);
  }
}

impl SseEncode for crate::infra::database_schemas::game_match::GameMatchTable {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.table, serializer);
    <String>::sse_encode(self.team_number, serializer);
    <bool>::sse_encode(self.score_submitted, serializer);
  }
}

impl SseEncode for crate::infra::database_schemas::game_table::GameTable {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.table_name, serializer);
  }
}

impl SseEncode for i32 {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
  }
}

impl SseEncode for crate::infra::database_schemas::judging_pod::JudgingPod {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.pod_name, serializer);
  }
}

impl SseEncode for crate::infra::database_schemas::judging_session::JudgingSession {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.session_number, serializer);
    <crate::infra::database_schemas::date_time::TmsDateTime>::sse_encode(self.start_time, serializer);
    <crate::infra::database_schemas::date_time::TmsDateTime>::sse_encode(self.end_time, serializer);
    <Vec<crate::infra::database_schemas::judging_session::JudgingSessionPod>>::sse_encode(self.judging_session_pods, serializer);
  }
}

impl SseEncode for crate::infra::database_schemas::judging_session::JudgingSessionPod {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.pod, serializer);
    <String>::sse_encode(self.team_number, serializer);
    <bool>::sse_encode(self.core_values_submitted, serializer);
    <bool>::sse_encode(self.innovation_submitted, serializer);
    <bool>::sse_encode(self.robot_design_submitted, serializer);
  }
}

impl SseEncode for Vec<String> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <i32>::sse_encode(self.len() as _, serializer);
    for item in self {
      <String>::sse_encode(item, serializer);
    }
  }
}

impl SseEncode for Vec<crate::infra::database_schemas::game_match::GameMatchTable> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <i32>::sse_encode(self.len() as _, serializer);
    for item in self {
      <crate::infra::database_schemas::game_match::GameMatchTable>::sse_encode(item, serializer);
    }
  }
}

impl SseEncode for Vec<crate::infra::database_schemas::judging_session::JudgingSessionPod> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <i32>::sse_encode(self.len() as _, serializer);
    for item in self {
      <crate::infra::database_schemas::judging_session::JudgingSessionPod>::sse_encode(item, serializer);
    }
  }
}

impl SseEncode for Vec<u8> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <i32>::sse_encode(self.len() as _, serializer);
    for item in self {
      <u8>::sse_encode(item, serializer);
    }
  }
}

impl SseEncode for Vec<(String, bool)> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <i32>::sse_encode(self.len() as _, serializer);
    for item in self {
      <(String, bool)>::sse_encode(item, serializer);
    }
  }
}

impl SseEncode for Vec<crate::infra::TmsTreeRole> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <i32>::sse_encode(self.len() as _, serializer);
    for item in self {
      <crate::infra::TmsTreeRole>::sse_encode(item, serializer);
    }
  }
}

impl SseEncode for crate::infra::network_schemas::login_requests::LoginRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.username, serializer);
    <String>::sse_encode(self.password, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::login_requests::LoginResponse {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <Vec<crate::infra::TmsTreeRole>>::sse_encode(self.roles, serializer);
  }
}

impl SseEncode for Option<String> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <bool>::sse_encode(self.is_some(), serializer);
    if let Some(value) = self {
      <String>::sse_encode(value, serializer);
    }
  }
}

impl SseEncode for Option<crate::infra::database_schemas::date_time::TmsDate> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <bool>::sse_encode(self.is_some(), serializer);
    if let Some(value) = self {
      <crate::infra::database_schemas::date_time::TmsDate>::sse_encode(value, serializer);
    }
  }
}

impl SseEncode for Option<crate::infra::database_schemas::date_time::TmsTime> {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <bool>::sse_encode(self.is_some(), serializer);
    if let Some(value) = self {
      <crate::infra::database_schemas::date_time::TmsTime>::sse_encode(value, serializer);
    }
  }
}

impl SseEncode for (String, bool) {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.0, serializer);
    <bool>::sse_encode(self.1, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::register_requests::RegisterRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <Option<String>>::sse_encode(self.username, serializer);
    <Option<String>>::sse_encode(self.password, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::register_requests::RegisterResponse {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.auth_token, serializer);
    <String>::sse_encode(self.uuid, serializer);
    <String>::sse_encode(self.url, serializer);
    <String>::sse_encode(self.server_ip, serializer);
    <Vec<crate::infra::TmsTreeRole>>::sse_encode(self.roles, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <Vec<String>>::sse_encode(self.game_match_numbers, serializer);
  }
}

impl SseEncode for crate::infra::database_schemas::team::Team {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.cloud_id, serializer);
    <String>::sse_encode(self.number, serializer);
    <String>::sse_encode(self.name, serializer);
    <String>::sse_encode(self.affiliation, serializer);
    <u32>::sse_encode(self.ranking, serializer);
  }
}

impl SseEncode for crate::infra::database_schemas::date_time::TmsDate {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <i32>::sse_encode(self.year, serializer);
    <u32>::sse_encode(self.month, serializer);
    <u32>::sse_encode(self.day, serializer);
  }
}

impl SseEncode for crate::infra::database_schemas::date_time::TmsDateTime {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <Option<crate::infra::database_schemas::date_time::TmsDate>>::sse_encode(self.date, serializer);
    <Option<crate::infra::database_schemas::date_time::TmsTime>>::sse_encode(self.time, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <i32>::sse_encode(
      match self {
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState::Running => 0,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState::Ready => 1,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState::Load => 2,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState::Unload => 3,
        _ => {
          unimplemented!("");
        }
      },
      serializer,
    );
  }
}

impl SseEncode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchStateEvent {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchState>::sse_encode(self.state, serializer);
    <Vec<(String, bool)>>::sse_encode(self.game_match_tables, serializer);
    <Vec<String>>::sse_encode(self.game_match_numbers, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerMatchTimerTimeEvent {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <u32>::sse_encode(self.time, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <i32>::sse_encode(
      match self {
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::PurgeEvent => 0,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerStartCountdownEvent => 1,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerStartEvent => 2,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerTimeEvent => 3,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerEndgameEvent => 4,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerEndEvent => 5,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerStopEvent => 6,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerReloadEvent => 7,
        crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchStateEvent => 8,
        _ => {
          unimplemented!("");
        }
      },
      serializer,
    );
  }
}

impl SseEncode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.auth_token, serializer);
    <crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent>::sse_encode(self.message_event, serializer);
    <Option<String>>::sse_encode(self.message, serializer);
  }
}

impl SseEncode for crate::infra::database_schemas::date_time::TmsTime {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <u32>::sse_encode(self.hour, serializer);
    <u32>::sse_encode(self.minute, serializer);
    <u32>::sse_encode(self.second, serializer);
  }
}

impl SseEncode for crate::infra::TmsTreeRole {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.role_id, serializer);
    <String>::sse_encode(self.password, serializer);
    <Vec<String>>::sse_encode(self.read_echo_trees, serializer);
    <Vec<String>>::sse_encode(self.read_write_echo_trees, serializer);
  }
}

impl SseEncode for crate::infra::database_schemas::tournament_config::TournamentConfig {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.name, serializer);
    <u32>::sse_encode(self.backup_interval, serializer);
    <u32>::sse_encode(self.retain_backups, serializer);
    <u32>::sse_encode(self.end_game_timer_length, serializer);
    <u32>::sse_encode(self.timer_length, serializer);
    <String>::sse_encode(self.season, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <u32>::sse_encode(self.interval, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <u32>::sse_encode(self.timer_length, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.name, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <u32>::sse_encode(self.retain_backups, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.season, serializer);
  }
}

impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <u32>::sse_encode(self.timer_length, serializer);
  }
}

impl SseEncode for u16 {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
  }
}

impl SseEncode for u32 {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
  }
}

impl SseEncode for u8 {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    serializer.cursor.write_u8(self).unwrap();
  }
}

impl SseEncode for () {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for crate::infra::database_schemas::user::User {
  // Codec=Sse (Serialization based), see doc to use other codecs
  fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
    <String>::sse_encode(self.username, serializer);
    <String>::sse_encode(self.password, serializer);
    <Vec<String>>::sse_encode(self.roles, serializer);
  }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
