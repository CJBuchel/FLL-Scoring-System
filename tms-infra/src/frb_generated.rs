// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.2.0.

#![allow(
non_camel_case_types,
unused,
non_snake_case,
clippy::needless_return,
clippy::redundant_closure_call,
clippy::redundant_closure,
clippy::useless_conversion,
clippy::unit_arg,
clippy::unused_unit,
clippy::double_parens,
clippy::let_and_return,
clippy::too_many_arguments,
clippy::match_single_binding,
clippy::clone_on_copy,
clippy::let_unit_value,
clippy::deref_addrof,
clippy::explicit_auto_deref,
clippy::borrow_deref_ref,
clippy::needless_borrow
)]

// Section: imports

use crate::infra::DataSchemeExtensions;
use crate::infra::fll_infra::seasons::BaseSeason;
use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
                    default_stream_sink_codec = SseCodec,
                    default_rust_opaque = RustOpaqueMoi,
                    default_rust_auto_opaque = RustAutoOpaqueMoi,
                );
                pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.2.0";
                pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = 1517757742;
            

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__infra__init_app_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "init_app", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok({ crate::infra::init_app(); })?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__tms_tree_role_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_tree_role_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::TmsTreeRole::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__tms_tree_role_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_tree_role_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::TmsTreeRole::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__tms_tree_role_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_tree_role_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::TmsTreeRole>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::TmsTreeRole::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__tms_tree_role_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_tree_role_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::TmsTreeRole::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__date_time__tms_date_time_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_date_time_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::date_time::TmsDateTime::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__database_schemas__date_time__tms_date_time_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_date_time_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::date_time::TmsDateTime::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__date_time__tms_date_time_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_date_time_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::database_schemas::date_time::TmsDateTime>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::date_time::TmsDateTime::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__date_time__tms_date_time_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_date_time_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::date_time::TmsDateTime::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__game_match__game_match_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "game_match_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::game_match::GameMatch::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__database_schemas__game_match__game_match_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "game_match_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::game_match::GameMatch::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__game_match__game_match_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "game_match_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::database_schemas::game_match::GameMatch>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::game_match::GameMatch::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__game_match__game_match_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "game_match_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::game_match::GameMatch::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__game_table__game_table_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "game_table_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::game_table::GameTable::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__database_schemas__game_table__game_table_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "game_table_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::game_table::GameTable::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__game_table__game_table_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "game_table_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::database_schemas::game_table::GameTable>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::game_table::GameTable::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__game_table__game_table_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "game_table_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::game_table::GameTable::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__judging_pod__judging_pod_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "judging_pod_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::judging_pod::JudgingPod::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__database_schemas__judging_pod__judging_pod_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "judging_pod_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::judging_pod::JudgingPod::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__judging_pod__judging_pod_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "judging_pod_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::database_schemas::judging_pod::JudgingPod>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::judging_pod::JudgingPod::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__judging_pod__judging_pod_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "judging_pod_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::judging_pod::JudgingPod::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__judging_session__judging_session_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "judging_session_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::judging_session::JudgingSession::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__database_schemas__judging_session__judging_session_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "judging_session_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::judging_session::JudgingSession::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__judging_session__judging_session_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "judging_session_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::database_schemas::judging_session::JudgingSession>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::judging_session::JudgingSession::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__judging_session__judging_session_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "judging_session_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::judging_session::JudgingSession::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__team__team_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "team_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::team::Team::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__database_schemas__team__team_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "team_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::team::Team::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__team__team_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "team_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::database_schemas::team::Team>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::team::Team::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__team__team_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "team_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::team::Team::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__tournament_blueprint__tournament_blueprint_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_blueprint_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__database_schemas__tournament_blueprint__tournament_blueprint_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_blueprint_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__tournament_blueprint__tournament_blueprint_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_blueprint_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__tournament_blueprint__tournament_blueprint_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_blueprint_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__tournament_config__tournament_config_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::tournament_config::TournamentConfig::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__database_schemas__tournament_config__tournament_config_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::tournament_config::TournamentConfig::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__tournament_config__tournament_config_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::database_schemas::tournament_config::TournamentConfig>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::tournament_config::TournamentConfig::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__tournament_config__tournament_config_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::tournament_config::TournamentConfig::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__user__user_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "user_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::user::User::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__database_schemas__user__user_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "user_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::user::User::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__user__user_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "user_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::database_schemas::user::User>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::user::User::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__database_schemas__user__user_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "user_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::database_schemas::user::User::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__category_question__categorical_question_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "categorical_question_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::category_question::CategoricalQuestion::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__category_question__categorical_question_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "categorical_question_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::category_question::CategoricalQuestion::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__category_question__categorical_question_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "categorical_question_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::fll_infra::category_question::CategoricalQuestion>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::category_question::CategoricalQuestion::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__category_question__categorical_question_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "categorical_question_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::category_question::CategoricalQuestion::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__fll_blueprint__fll_blueprint_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "fll_blueprint_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::fll_blueprint::FllBlueprint::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__fll_blueprint__fll_blueprint_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "fll_blueprint_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::fll_blueprint::FllBlueprint::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__fll_blueprint__fll_blueprint_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "fll_blueprint_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::fll_infra::fll_blueprint::FllBlueprint>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::fll_blueprint::FllBlueprint::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__fll_blueprint__fll_blueprint_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "fll_blueprint_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::fll_blueprint::FllBlueprint::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__fll_blueprint_map__fll_blueprint_map_calculate_score_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "fll_blueprint_map_calculate_score", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_blueprint = <crate::infra::fll_infra::fll_blueprint::FllBlueprint>::sse_decode(&mut deserializer);
let api_answers = <Vec<crate::infra::fll_infra::question::QuestionAnswer>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::fll_blueprint_map::FllBlueprintMap::calculate_score(api_blueprint, api_answers))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__fll_blueprint_map__fll_blueprint_map_validate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "fll_blueprint_map_validate", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_season = <String>::sse_decode(&mut deserializer);
let api_answers = <Vec<crate::infra::fll_infra::question::QuestionAnswer>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::fll_blueprint_map::FllBlueprintMap::validate(api_season, api_answers))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__mission__mission_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mission_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::mission::Mission::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__mission__mission_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mission_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::mission::Mission::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__mission__mission_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mission_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::fll_infra::mission::Mission>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::mission::Mission::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__mission__mission_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "mission_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::mission::Mission::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__question__question_answer_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_answer_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::question::QuestionAnswer::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__question__question_answer_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_answer_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::question::QuestionAnswer::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__question__question_answer_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_answer_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::fll_infra::question::QuestionAnswer>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::question::QuestionAnswer::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__question__question_answer_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_answer_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::question::QuestionAnswer::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__question__question_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::question::Question::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__question__question_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::question::Question::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__question__question_get_score_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_get_score", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::fll_infra::question::Question>::sse_decode(&mut deserializer);
let api_answers = <Vec<crate::infra::fll_infra::question::QuestionAnswer>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::question::Question::get_score(&api_that, api_answers))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__question__question_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::fll_infra::question::Question>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::question::Question::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__question__question_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::question::Question::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__fll_infra__rule_engine__question_rule_apply_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_rule_apply", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::fll_infra::rule_engine::QuestionRule>::sse_decode(&mut deserializer);
let api_answers = <Vec<crate::infra::fll_infra::question::QuestionAnswer>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::rule_engine::QuestionRule::apply(&api_that, api_answers))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__rule_engine__question_rule_evaluate_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_rule_evaluate", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::fll_infra::rule_engine::QuestionRule>::sse_decode(&mut deserializer);
let api_answers = <Vec<crate::infra::fll_infra::question::QuestionAnswer>>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::rule_engine::QuestionRule::evaluate(&api_that, api_answers))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__rule_engine__question_rule_new_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "question_rule_new", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_condition = <String>::sse_decode(&mut deserializer);
let api_output = <i32>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::rule_engine::QuestionRule::new(api_condition, api_output))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__seasons__fll_2023__master_piece_get_fll_game_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "master_piece_get_fll_game", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::fll_infra::seasons::fll_2023::MasterPiece>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::seasons::fll_2023::MasterPiece::get_fll_game(&api_that))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__fll_infra__seasons__fll_2023__master_piece_get_season_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "master_piece_get_season", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::fll_infra::seasons::fll_2023::MasterPiece>::sse_decode(&mut deserializer);deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::fll_infra::seasons::fll_2023::MasterPiece::get_season(&api_that))?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__errors__error_message_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "error_message_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::errors::ErrorMessage::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__errors__error_message_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "error_message_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::errors::ErrorMessage::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__errors__error_message_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "error_message_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::errors::ErrorMessage>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::errors::ErrorMessage::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__errors__error_message_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "error_message_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::errors::ErrorMessage::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__login_requests__login_request_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "login_request_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::login_requests::LoginRequest::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__login_requests__login_request_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "login_request_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::login_requests::LoginRequest::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__login_requests__login_request_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "login_request_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::login_requests::LoginRequest>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::login_requests::LoginRequest::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__login_requests__login_request_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "login_request_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::login_requests::LoginRequest::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__login_requests__login_response_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "login_response_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::login_requests::LoginResponse::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__login_requests__login_response_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "login_response_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::login_requests::LoginResponse::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__login_requests__login_response_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "login_response_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::login_requests::LoginResponse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::login_requests::LoginResponse::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__login_requests__login_response_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "login_response_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::login_requests::LoginResponse::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__register_requests__register_request_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_request_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::register_requests::RegisterRequest::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__register_requests__register_request_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_request_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::register_requests::RegisterRequest::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__register_requests__register_request_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_request_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::register_requests::RegisterRequest>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::register_requests::RegisterRequest::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__register_requests__register_request_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_request_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::register_requests::RegisterRequest::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__register_requests__register_response_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_response_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::register_requests::RegisterResponse::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__register_requests__register_response_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_response_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::register_requests::RegisterResponse::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__register_requests__register_response_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_response_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::register_requests::RegisterResponse>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::register_requests::RegisterResponse::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__register_requests__register_response_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "register_response_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::register_requests::RegisterResponse::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "robot_games_load_match_request_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "robot_games_load_match_request_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "robot_games_load_match_request_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "robot_games_load_match_request_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__socket_protocol__match_state_event__tms_server_match_state_event_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_match_state_event_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__socket_protocol__match_state_event__tms_server_match_state_event_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_match_state_event_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__socket_protocol__match_state_event__tms_server_match_state_event_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_match_state_event_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__socket_protocol__match_state_event__tms_server_match_state_event_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_match_state_event_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__socket_protocol__match_time_event__tms_server_match_timer_event_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_match_timer_event_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__socket_protocol__match_time_event__tms_server_match_timer_event_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_match_timer_event_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__socket_protocol__match_time_event__tms_server_match_timer_event_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_match_timer_event_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__socket_protocol__match_time_event__tms_server_match_timer_event_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_match_timer_event_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_socket_message_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_socket_message_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_socket_message_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tms_server_socket_message_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_admin_password_request_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_admin_password_request_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_admin_password_request_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_admin_password_request_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_admin_password_request_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_admin_password_request_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_admin_password_request_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_admin_password_request_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_backup_interval_request_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_backup_interval_request_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_backup_interval_request_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_backup_interval_request_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_endgame_timer_length_request_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_endgame_timer_length_request_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_endgame_timer_length_request_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_endgame_timer_length_request_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_name_request_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_name_request_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_name_request_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_name_request_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_retain_backups_request_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_retain_backups_request_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_retain_backups_request_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_retain_backups_request_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_season_request_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_season_request_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_season_request_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_season_request_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest::to_schema())?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_default_impl(port_: flutter_rust_bridge::for_generated::MessagePort,ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32)  {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec,_,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_timer_length_request_default", port: Some(port_), mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end(); move |context|  {
                    transform_result_sse::<_, ()>((move ||  {
                         let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest::default())?;   Ok(output_ok)
                    })())
                } })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_from_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_timer_length_request_from_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_json = <String>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest::from_json_string(&api_json))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_to_json_string_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_timer_length_request_to_json_string", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_that = <crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest>::sse_decode(&mut deserializer);deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest::to_json_string(&api_that))?;   Ok(output_ok)
                })()) })
            }fn wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_to_schema_impl(ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,rust_vec_len_: i32,data_len_: i32) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec,_>(flutter_rust_bridge::for_generated::TaskInfo{ debug_name: "tournament_config_set_timer_length_request_to_schema", port: None, mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync }, move || { 
            let message = unsafe { flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(ptr_, rust_vec_len_, data_len_) };
            let mut deserializer = flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
                transform_result_sse::<_, ()>((move || {
                     let output_ok = Result::<_,()>::Ok(crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest::to_schema())?;   Ok(output_ok)
                })()) })
            }

// Section: dart2rust


                impl SseDecode for String {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();}
                }
                
                impl SseDecode for crate::infra::network_schemas::tournament_config_requests::BlueprintType {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::infra::network_schemas::tournament_config_requests::BlueprintType::Agnostic,
1 => crate::infra::network_schemas::tournament_config_requests::BlueprintType::Seasonal,
            _ => unreachable!("Invalid variant for BlueprintType: {}", inner),
        };}
                }
                
                impl SseDecode for bool {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u8().unwrap() != 0}
                }
                
                impl SseDecode for crate::infra::fll_infra::category_question::CategoricalOption {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_label = <String>::sse_decode(deserializer);
let mut var_score = <i32>::sse_decode(deserializer);
return crate::infra::fll_infra::category_question::CategoricalOption{label: var_label, score: var_score};}
                }
                
                impl SseDecode for crate::infra::fll_infra::category_question::CategoricalQuestion {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_options = <Vec<crate::infra::fll_infra::category_question::CategoricalOption>>::sse_decode(deserializer);
let mut var_defaultOption = <String>::sse_decode(deserializer);
return crate::infra::fll_infra::category_question::CategoricalQuestion{options: var_options, default_option: var_defaultOption};}
                }
                
                impl SseDecode for crate::infra::network_schemas::errors::ErrorMessage {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_code = <u16>::sse_decode(deserializer);
let mut var_message = <String>::sse_decode(deserializer);
return crate::infra::network_schemas::errors::ErrorMessage{code: var_code, message: var_message};}
                }
                
                impl SseDecode for crate::infra::fll_infra::fll_blueprint::FllBlueprint {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_robotGameQuestions = <Vec<crate::infra::fll_infra::question::Question>>::sse_decode(deserializer);
let mut var_robotGameMissions = <Vec<crate::infra::fll_infra::mission::Mission>>::sse_decode(deserializer);
return crate::infra::fll_infra::fll_blueprint::FllBlueprint{robot_game_questions: var_robotGameQuestions, robot_game_missions: var_robotGameMissions};}
                }
                
                impl SseDecode for crate::infra::fll_infra::fll_blueprint_map::FllBlueprintMap {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {return crate::infra::fll_infra::fll_blueprint_map::FllBlueprintMap{};}
                }
                
                impl SseDecode for crate::infra::database_schemas::game_match::GameMatch {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_matchNumber = <String>::sse_decode(deserializer);
let mut var_startTime = <crate::infra::database_schemas::date_time::TmsDateTime>::sse_decode(deserializer);
let mut var_endTime = <crate::infra::database_schemas::date_time::TmsDateTime>::sse_decode(deserializer);
let mut var_gameMatchTables = <Vec<crate::infra::database_schemas::game_match::GameMatchTable>>::sse_decode(deserializer);
let mut var_completed = <bool>::sse_decode(deserializer);
return crate::infra::database_schemas::game_match::GameMatch{match_number: var_matchNumber, start_time: var_startTime, end_time: var_endTime, game_match_tables: var_gameMatchTables, completed: var_completed};}
                }
                
                impl SseDecode for crate::infra::database_schemas::game_match::GameMatchTable {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_table = <String>::sse_decode(deserializer);
let mut var_teamNumber = <String>::sse_decode(deserializer);
let mut var_scoreSubmitted = <bool>::sse_decode(deserializer);
return crate::infra::database_schemas::game_match::GameMatchTable{table: var_table, team_number: var_teamNumber, score_submitted: var_scoreSubmitted};}
                }
                
                impl SseDecode for crate::infra::database_schemas::game_table::GameTable {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_tableName = <String>::sse_decode(deserializer);
return crate::infra::database_schemas::game_table::GameTable{table_name: var_tableName};}
                }
                
                impl SseDecode for i32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_i32::<NativeEndian>().unwrap()}
                }
                
                impl SseDecode for crate::infra::database_schemas::judging_pod::JudgingPod {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_podName = <String>::sse_decode(deserializer);
return crate::infra::database_schemas::judging_pod::JudgingPod{pod_name: var_podName};}
                }
                
                impl SseDecode for crate::infra::database_schemas::judging_session::JudgingSession {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_sessionNumber = <String>::sse_decode(deserializer);
let mut var_startTime = <crate::infra::database_schemas::date_time::TmsDateTime>::sse_decode(deserializer);
let mut var_endTime = <crate::infra::database_schemas::date_time::TmsDateTime>::sse_decode(deserializer);
let mut var_judgingSessionPods = <Vec<crate::infra::database_schemas::judging_session::JudgingSessionPod>>::sse_decode(deserializer);
return crate::infra::database_schemas::judging_session::JudgingSession{session_number: var_sessionNumber, start_time: var_startTime, end_time: var_endTime, judging_session_pods: var_judgingSessionPods};}
                }
                
                impl SseDecode for crate::infra::database_schemas::judging_session::JudgingSessionPod {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_pod = <String>::sse_decode(deserializer);
let mut var_teamNumber = <String>::sse_decode(deserializer);
let mut var_coreValuesSubmitted = <bool>::sse_decode(deserializer);
let mut var_innovationSubmitted = <bool>::sse_decode(deserializer);
let mut var_robotDesignSubmitted = <bool>::sse_decode(deserializer);
return crate::infra::database_schemas::judging_session::JudgingSessionPod{pod: var_pod, team_number: var_teamNumber, core_values_submitted: var_coreValuesSubmitted, innovation_submitted: var_innovationSubmitted, robot_design_submitted: var_robotDesignSubmitted};}
                }
                
                impl SseDecode for Vec<String> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<String>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<crate::infra::fll_infra::category_question::CategoricalOption> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::infra::fll_infra::category_question::CategoricalOption>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<crate::infra::database_schemas::game_match::GameMatchTable> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::infra::database_schemas::game_match::GameMatchTable>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<crate::infra::database_schemas::judging_session::JudgingSessionPod> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::infra::database_schemas::judging_session::JudgingSessionPod>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<crate::infra::fll_infra::mission::Mission> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::infra::fll_infra::mission::Mission>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<u8> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<u8>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<crate::infra::fll_infra::question::Question> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::infra::fll_infra::question::Question>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<crate::infra::fll_infra::question::QuestionAnswer> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::infra::fll_infra::question::QuestionAnswer>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<crate::infra::fll_infra::rule_engine::QuestionRule> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::infra::fll_infra::rule_engine::QuestionRule>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<crate::infra::fll_infra::question::QuestionValidationError> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::infra::fll_infra::question::QuestionValidationError>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<(String,bool,)> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<(String,bool,)>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for Vec<crate::infra::TmsTreeRole> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ { ans_.push(<crate::infra::TmsTreeRole>::sse_decode(deserializer)); }
        return ans_;}
                }
                
                impl SseDecode for crate::infra::network_schemas::login_requests::LoginRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_username = <String>::sse_decode(deserializer);
let mut var_password = <String>::sse_decode(deserializer);
return crate::infra::network_schemas::login_requests::LoginRequest{username: var_username, password: var_password};}
                }
                
                impl SseDecode for crate::infra::network_schemas::login_requests::LoginResponse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_roles = <Vec<crate::infra::TmsTreeRole>>::sse_decode(deserializer);
return crate::infra::network_schemas::login_requests::LoginResponse{roles: var_roles};}
                }
                
                impl SseDecode for crate::infra::fll_infra::seasons::fll_2023::MasterPiece {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {return crate::infra::fll_infra::seasons::fll_2023::MasterPiece{};}
                }
                
                impl SseDecode for crate::infra::fll_infra::mission::Mission {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_id = <String>::sse_decode(deserializer);
let mut var_label = <String>::sse_decode(deserializer);
let mut var_imageUrl = <String>::sse_decode(deserializer);
return crate::infra::fll_infra::mission::Mission{id: var_id, label: var_label, image_url: var_imageUrl};}
                }
                
                impl SseDecode for Option<String> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<String>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<crate::infra::database_schemas::date_time::TmsDate> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<crate::infra::database_schemas::date_time::TmsDate>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<crate::infra::database_schemas::date_time::TmsTime> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<crate::infra::database_schemas::date_time::TmsTime>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<u32> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<u32>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for Option<Vec<crate::infra::fll_infra::question::QuestionValidationError>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {if (<bool>::sse_decode(deserializer)) {
                return Some(<Vec<crate::infra::fll_infra::question::QuestionValidationError>>::sse_decode(deserializer));
            } else {
                return None;
            }}
                }
                
                impl SseDecode for crate::infra::fll_infra::question::Question {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_id = <String>::sse_decode(deserializer);
let mut var_label = <String>::sse_decode(deserializer);
let mut var_labelShort = <String>::sse_decode(deserializer);
let mut var_input = <crate::infra::fll_infra::question::QuestionInput>::sse_decode(deserializer);
let mut var_rules = <Vec<crate::infra::fll_infra::rule_engine::QuestionRule>>::sse_decode(deserializer);
return crate::infra::fll_infra::question::Question{id: var_id, label: var_label, label_short: var_labelShort, input: var_input, rules: var_rules};}
                }
                
                impl SseDecode for crate::infra::fll_infra::question::QuestionAnswer {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_questionId = <String>::sse_decode(deserializer);
let mut var_answer = <String>::sse_decode(deserializer);
return crate::infra::fll_infra::question::QuestionAnswer{question_id: var_questionId, answer: var_answer};}
                }
                
                impl SseDecode for crate::infra::fll_infra::question::QuestionInput {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut tag_ = <i32>::sse_decode(deserializer);
            match tag_ {0 => { let mut var_field0 = <crate::infra::fll_infra::category_question::CategoricalQuestion>::sse_decode(deserializer);
return crate::infra::fll_infra::question::QuestionInput::Categorical(var_field0); }
 _ => { unimplemented!(""); }}}
                }
                
                impl SseDecode for crate::infra::fll_infra::rule_engine::QuestionRule {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_condition = <String>::sse_decode(deserializer);
let mut var_output = <i32>::sse_decode(deserializer);
return crate::infra::fll_infra::rule_engine::QuestionRule{condition: var_condition, output: var_output};}
                }
                
                impl SseDecode for crate::infra::fll_infra::question::QuestionValidationError {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_questionIds = <String>::sse_decode(deserializer);
let mut var_message = <String>::sse_decode(deserializer);
return crate::infra::fll_infra::question::QuestionValidationError{question_ids: var_questionIds, message: var_message};}
                }
                
                impl SseDecode for (String,bool,) {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_field0 = <String>::sse_decode(deserializer);
let mut var_field1 = <bool>::sse_decode(deserializer);
return (var_field0, var_field1);}
                }
                
                impl SseDecode for crate::infra::network_schemas::register_requests::RegisterRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_username = <Option<String>>::sse_decode(deserializer);
let mut var_password = <Option<String>>::sse_decode(deserializer);
return crate::infra::network_schemas::register_requests::RegisterRequest{username: var_username, password: var_password};}
                }
                
                impl SseDecode for crate::infra::network_schemas::register_requests::RegisterResponse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_authToken = <String>::sse_decode(deserializer);
let mut var_uuid = <String>::sse_decode(deserializer);
let mut var_url = <String>::sse_decode(deserializer);
let mut var_serverIp = <String>::sse_decode(deserializer);
let mut var_roles = <Vec<crate::infra::TmsTreeRole>>::sse_decode(deserializer);
return crate::infra::network_schemas::register_requests::RegisterResponse{auth_token: var_authToken, uuid: var_uuid, url: var_url, server_ip: var_serverIp, roles: var_roles};}
                }
                
                impl SseDecode for crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_gameMatchNumbers = <Vec<String>>::sse_decode(deserializer);
return crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest{game_match_numbers: var_gameMatchNumbers};}
                }
                
                impl SseDecode for crate::infra::database_schemas::team::Team {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_number = <String>::sse_decode(deserializer);
let mut var_name = <String>::sse_decode(deserializer);
let mut var_affiliation = <String>::sse_decode(deserializer);
let mut var_ranking = <u32>::sse_decode(deserializer);
return crate::infra::database_schemas::team::Team{number: var_number, name: var_name, affiliation: var_affiliation, ranking: var_ranking};}
                }
                
                impl SseDecode for crate::infra::database_schemas::date_time::TmsDate {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_year = <i32>::sse_decode(deserializer);
let mut var_month = <u32>::sse_decode(deserializer);
let mut var_day = <u32>::sse_decode(deserializer);
return crate::infra::database_schemas::date_time::TmsDate{year: var_year, month: var_month, day: var_day};}
                }
                
                impl SseDecode for crate::infra::database_schemas::date_time::TmsDateTime {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_date = <Option<crate::infra::database_schemas::date_time::TmsDate>>::sse_decode(deserializer);
let mut var_time = <Option<crate::infra::database_schemas::date_time::TmsTime>>::sse_decode(deserializer);
return crate::infra::database_schemas::date_time::TmsDateTime{date: var_date, time: var_time};}
                }
                
                impl SseDecode for crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState::Running,
1 => crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState::Ready,
2 => crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState::Load,
3 => crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState::Unload,
            _ => unreachable!("Invalid variant for TmsServerMatchState: {}", inner),
        };}
                }
                
                impl SseDecode for crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_state = <crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState>::sse_decode(deserializer);
let mut var_gameMatchTables = <Vec<(String,bool,)>>::sse_decode(deserializer);
let mut var_gameMatchNumbers = <Vec<String>>::sse_decode(deserializer);
return crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent{state: var_state, game_match_tables: var_gameMatchTables, game_match_numbers: var_gameMatchNumbers};}
                }
                
                impl SseDecode for crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_time = <Option<u32>>::sse_decode(deserializer);
let mut var_state = <crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState>::sse_decode(deserializer);
return crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent{time: var_time, state: var_state};}
                }
                
                impl SseDecode for crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::StartWithCountdown,
1 => crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::Start,
2 => crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::Stop,
3 => crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::End,
4 => crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::Time,
5 => crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::Endgame,
6 => crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::Reload,
            _ => unreachable!("Invalid variant for TmsServerMatchTimerState: {}", inner),
        };}
                }
                
                impl SseDecode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::PurgeEvent,
1 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerEvent,
2 => crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchStateEvent,
            _ => unreachable!("Invalid variant for TmsServerSocketEvent: {}", inner),
        };}
                }
                
                impl SseDecode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_authToken = <String>::sse_decode(deserializer);
let mut var_messageEvent = <crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent>::sse_decode(deserializer);
let mut var_message = <Option<String>>::sse_decode(deserializer);
return crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage{auth_token: var_authToken, message_event: var_messageEvent, message: var_message};}
                }
                
                impl SseDecode for crate::infra::database_schemas::date_time::TmsTime {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_hour = <u32>::sse_decode(deserializer);
let mut var_minute = <u32>::sse_decode(deserializer);
let mut var_second = <u32>::sse_decode(deserializer);
return crate::infra::database_schemas::date_time::TmsTime{hour: var_hour, minute: var_minute, second: var_second};}
                }
                
                impl SseDecode for crate::infra::TmsTreeRole {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_roleId = <String>::sse_decode(deserializer);
let mut var_password = <String>::sse_decode(deserializer);
let mut var_readEchoTrees = <Vec<String>>::sse_decode(deserializer);
let mut var_readWriteEchoTrees = <Vec<String>>::sse_decode(deserializer);
return crate::infra::TmsTreeRole{role_id: var_roleId, password: var_password, read_echo_trees: var_readEchoTrees, read_write_echo_trees: var_readWriteEchoTrees};}
                }
                
                impl SseDecode for crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_title = <String>::sse_decode(deserializer);
let mut var_blueprint = <crate::infra::fll_infra::fll_blueprint::FllBlueprint>::sse_decode(deserializer);
return crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint{title: var_title, blueprint: var_blueprint};}
                }
                
                impl SseDecode for crate::infra::database_schemas::tournament_config::TournamentConfig {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_name = <String>::sse_decode(deserializer);
let mut var_backupInterval = <u32>::sse_decode(deserializer);
let mut var_retainBackups = <u32>::sse_decode(deserializer);
let mut var_endGameTimerLength = <u32>::sse_decode(deserializer);
let mut var_timerLength = <u32>::sse_decode(deserializer);
let mut var_season = <Option<String>>::sse_decode(deserializer);
let mut var_blueprintType = <crate::infra::network_schemas::tournament_config_requests::BlueprintType>::sse_decode(deserializer);
return crate::infra::database_schemas::tournament_config::TournamentConfig{name: var_name, backup_interval: var_backupInterval, retain_backups: var_retainBackups, end_game_timer_length: var_endGameTimerLength, timer_length: var_timerLength, season: var_season, blueprint_type: var_blueprintType};}
                }
                
                impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_adminPassword = <String>::sse_decode(deserializer);
return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest{admin_password: var_adminPassword};}
                }
                
                impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_interval = <u32>::sse_decode(deserializer);
return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest{interval: var_interval};}
                }
                
                impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_timerLength = <u32>::sse_decode(deserializer);
return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest{timer_length: var_timerLength};}
                }
                
                impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_name = <String>::sse_decode(deserializer);
return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest{name: var_name};}
                }
                
                impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_retainBackups = <u32>::sse_decode(deserializer);
return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest{retain_backups: var_retainBackups};}
                }
                
                impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_blueprintType = <crate::infra::network_schemas::tournament_config_requests::BlueprintType>::sse_decode(deserializer);
let mut var_season = <Option<String>>::sse_decode(deserializer);
return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest{blueprint_type: var_blueprintType, season: var_season};}
                }
                
                impl SseDecode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_timerLength = <u32>::sse_decode(deserializer);
return crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest{timer_length: var_timerLength};}
                }
                
                impl SseDecode for u16 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u16::<NativeEndian>().unwrap()}
                }
                
                impl SseDecode for u32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u32::<NativeEndian>().unwrap()}
                }
                
                impl SseDecode for u8 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {deserializer.cursor.read_u8().unwrap()}
                }
                
                impl SseDecode for () {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
                }
                
                impl SseDecode for crate::infra::database_schemas::user::User {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {let mut var_username = <String>::sse_decode(deserializer);
let mut var_password = <String>::sse_decode(deserializer);
let mut var_roles = <Vec<String>>::sse_decode(deserializer);
return crate::infra::database_schemas::user::User{username: var_username, password: var_password, roles: var_roles};}
                }
                
                fn pde_ffi_dispatcher_primary_impl(
                    func_id: i32,port: flutter_rust_bridge::for_generated::MessagePort,
                    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
                    rust_vec_len: i32,
                    data_len: i32,
                )  {
                    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
                    match func_id {
                        4 => wire__crate__infra__init_app_impl(port, ptr, rust_vec_len, data_len),
5 => wire__crate__infra__tms_tree_role_default_impl(port, ptr, rust_vec_len, data_len),
9 => wire__crate__infra__database_schemas__date_time__tms_date_time_default_impl(port, ptr, rust_vec_len, data_len),
13 => wire__crate__infra__database_schemas__game_match__game_match_default_impl(port, ptr, rust_vec_len, data_len),
17 => wire__crate__infra__database_schemas__game_table__game_table_default_impl(port, ptr, rust_vec_len, data_len),
21 => wire__crate__infra__database_schemas__judging_pod__judging_pod_default_impl(port, ptr, rust_vec_len, data_len),
25 => wire__crate__infra__database_schemas__judging_session__judging_session_default_impl(port, ptr, rust_vec_len, data_len),
29 => wire__crate__infra__database_schemas__team__team_default_impl(port, ptr, rust_vec_len, data_len),
33 => wire__crate__infra__database_schemas__tournament_blueprint__tournament_blueprint_default_impl(port, ptr, rust_vec_len, data_len),
37 => wire__crate__infra__database_schemas__tournament_config__tournament_config_default_impl(port, ptr, rust_vec_len, data_len),
41 => wire__crate__infra__database_schemas__user__user_default_impl(port, ptr, rust_vec_len, data_len),
45 => wire__crate__infra__fll_infra__category_question__categorical_question_default_impl(port, ptr, rust_vec_len, data_len),
49 => wire__crate__infra__fll_infra__fll_blueprint__fll_blueprint_default_impl(port, ptr, rust_vec_len, data_len),
53 => wire__crate__infra__fll_infra__fll_blueprint_map__fll_blueprint_map_calculate_score_impl(port, ptr, rust_vec_len, data_len),
54 => wire__crate__infra__fll_infra__fll_blueprint_map__fll_blueprint_map_validate_impl(port, ptr, rust_vec_len, data_len),
55 => wire__crate__infra__fll_infra__mission__mission_default_impl(port, ptr, rust_vec_len, data_len),
59 => wire__crate__infra__fll_infra__question__question_answer_default_impl(port, ptr, rust_vec_len, data_len),
63 => wire__crate__infra__fll_infra__question__question_default_impl(port, ptr, rust_vec_len, data_len),
65 => wire__crate__infra__fll_infra__question__question_get_score_impl(port, ptr, rust_vec_len, data_len),
68 => wire__crate__infra__fll_infra__rule_engine__question_rule_apply_impl(port, ptr, rust_vec_len, data_len),
69 => wire__crate__infra__fll_infra__rule_engine__question_rule_evaluate_impl(port, ptr, rust_vec_len, data_len),
70 => wire__crate__infra__fll_infra__rule_engine__question_rule_new_impl(port, ptr, rust_vec_len, data_len),
74 => wire__crate__infra__fll_infra__seasons__fll_2023__master_piece_get_fll_game_impl(port, ptr, rust_vec_len, data_len),
75 => wire__crate__infra__fll_infra__seasons__fll_2023__master_piece_get_season_impl(port, ptr, rust_vec_len, data_len),
76 => wire__crate__infra__network_schemas__errors__error_message_default_impl(port, ptr, rust_vec_len, data_len),
80 => wire__crate__infra__network_schemas__login_requests__login_request_default_impl(port, ptr, rust_vec_len, data_len),
84 => wire__crate__infra__network_schemas__login_requests__login_response_default_impl(port, ptr, rust_vec_len, data_len),
88 => wire__crate__infra__network_schemas__register_requests__register_request_default_impl(port, ptr, rust_vec_len, data_len),
92 => wire__crate__infra__network_schemas__register_requests__register_response_default_impl(port, ptr, rust_vec_len, data_len),
96 => wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_default_impl(port, ptr, rust_vec_len, data_len),
100 => wire__crate__infra__network_schemas__socket_protocol__match_state_event__tms_server_match_state_event_default_impl(port, ptr, rust_vec_len, data_len),
104 => wire__crate__infra__network_schemas__socket_protocol__match_time_event__tms_server_match_timer_event_default_impl(port, ptr, rust_vec_len, data_len),
108 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_default_impl(port, ptr, rust_vec_len, data_len),
112 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_admin_password_request_default_impl(port, ptr, rust_vec_len, data_len),
116 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_default_impl(port, ptr, rust_vec_len, data_len),
120 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_default_impl(port, ptr, rust_vec_len, data_len),
124 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_default_impl(port, ptr, rust_vec_len, data_len),
128 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_default_impl(port, ptr, rust_vec_len, data_len),
132 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_default_impl(port, ptr, rust_vec_len, data_len),
136 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_default_impl(port, ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
                }
                
                fn pde_ffi_dispatcher_sync_impl(
                    func_id: i32,
                    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
                    rust_vec_len: i32,
                    data_len: i32,
                ) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
                    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
                    match func_id {
                        6 => wire__crate__infra__tms_tree_role_from_json_string_impl(ptr, rust_vec_len, data_len),
7 => wire__crate__infra__tms_tree_role_to_json_string_impl(ptr, rust_vec_len, data_len),
8 => wire__crate__infra__tms_tree_role_to_schema_impl(ptr, rust_vec_len, data_len),
10 => wire__crate__infra__database_schemas__date_time__tms_date_time_from_json_string_impl(ptr, rust_vec_len, data_len),
11 => wire__crate__infra__database_schemas__date_time__tms_date_time_to_json_string_impl(ptr, rust_vec_len, data_len),
12 => wire__crate__infra__database_schemas__date_time__tms_date_time_to_schema_impl(ptr, rust_vec_len, data_len),
14 => wire__crate__infra__database_schemas__game_match__game_match_from_json_string_impl(ptr, rust_vec_len, data_len),
15 => wire__crate__infra__database_schemas__game_match__game_match_to_json_string_impl(ptr, rust_vec_len, data_len),
16 => wire__crate__infra__database_schemas__game_match__game_match_to_schema_impl(ptr, rust_vec_len, data_len),
18 => wire__crate__infra__database_schemas__game_table__game_table_from_json_string_impl(ptr, rust_vec_len, data_len),
19 => wire__crate__infra__database_schemas__game_table__game_table_to_json_string_impl(ptr, rust_vec_len, data_len),
20 => wire__crate__infra__database_schemas__game_table__game_table_to_schema_impl(ptr, rust_vec_len, data_len),
22 => wire__crate__infra__database_schemas__judging_pod__judging_pod_from_json_string_impl(ptr, rust_vec_len, data_len),
23 => wire__crate__infra__database_schemas__judging_pod__judging_pod_to_json_string_impl(ptr, rust_vec_len, data_len),
24 => wire__crate__infra__database_schemas__judging_pod__judging_pod_to_schema_impl(ptr, rust_vec_len, data_len),
26 => wire__crate__infra__database_schemas__judging_session__judging_session_from_json_string_impl(ptr, rust_vec_len, data_len),
27 => wire__crate__infra__database_schemas__judging_session__judging_session_to_json_string_impl(ptr, rust_vec_len, data_len),
28 => wire__crate__infra__database_schemas__judging_session__judging_session_to_schema_impl(ptr, rust_vec_len, data_len),
30 => wire__crate__infra__database_schemas__team__team_from_json_string_impl(ptr, rust_vec_len, data_len),
31 => wire__crate__infra__database_schemas__team__team_to_json_string_impl(ptr, rust_vec_len, data_len),
32 => wire__crate__infra__database_schemas__team__team_to_schema_impl(ptr, rust_vec_len, data_len),
34 => wire__crate__infra__database_schemas__tournament_blueprint__tournament_blueprint_from_json_string_impl(ptr, rust_vec_len, data_len),
35 => wire__crate__infra__database_schemas__tournament_blueprint__tournament_blueprint_to_json_string_impl(ptr, rust_vec_len, data_len),
36 => wire__crate__infra__database_schemas__tournament_blueprint__tournament_blueprint_to_schema_impl(ptr, rust_vec_len, data_len),
38 => wire__crate__infra__database_schemas__tournament_config__tournament_config_from_json_string_impl(ptr, rust_vec_len, data_len),
39 => wire__crate__infra__database_schemas__tournament_config__tournament_config_to_json_string_impl(ptr, rust_vec_len, data_len),
40 => wire__crate__infra__database_schemas__tournament_config__tournament_config_to_schema_impl(ptr, rust_vec_len, data_len),
42 => wire__crate__infra__database_schemas__user__user_from_json_string_impl(ptr, rust_vec_len, data_len),
43 => wire__crate__infra__database_schemas__user__user_to_json_string_impl(ptr, rust_vec_len, data_len),
44 => wire__crate__infra__database_schemas__user__user_to_schema_impl(ptr, rust_vec_len, data_len),
46 => wire__crate__infra__fll_infra__category_question__categorical_question_from_json_string_impl(ptr, rust_vec_len, data_len),
47 => wire__crate__infra__fll_infra__category_question__categorical_question_to_json_string_impl(ptr, rust_vec_len, data_len),
48 => wire__crate__infra__fll_infra__category_question__categorical_question_to_schema_impl(ptr, rust_vec_len, data_len),
50 => wire__crate__infra__fll_infra__fll_blueprint__fll_blueprint_from_json_string_impl(ptr, rust_vec_len, data_len),
51 => wire__crate__infra__fll_infra__fll_blueprint__fll_blueprint_to_json_string_impl(ptr, rust_vec_len, data_len),
52 => wire__crate__infra__fll_infra__fll_blueprint__fll_blueprint_to_schema_impl(ptr, rust_vec_len, data_len),
56 => wire__crate__infra__fll_infra__mission__mission_from_json_string_impl(ptr, rust_vec_len, data_len),
57 => wire__crate__infra__fll_infra__mission__mission_to_json_string_impl(ptr, rust_vec_len, data_len),
58 => wire__crate__infra__fll_infra__mission__mission_to_schema_impl(ptr, rust_vec_len, data_len),
60 => wire__crate__infra__fll_infra__question__question_answer_from_json_string_impl(ptr, rust_vec_len, data_len),
61 => wire__crate__infra__fll_infra__question__question_answer_to_json_string_impl(ptr, rust_vec_len, data_len),
62 => wire__crate__infra__fll_infra__question__question_answer_to_schema_impl(ptr, rust_vec_len, data_len),
64 => wire__crate__infra__fll_infra__question__question_from_json_string_impl(ptr, rust_vec_len, data_len),
66 => wire__crate__infra__fll_infra__question__question_to_json_string_impl(ptr, rust_vec_len, data_len),
67 => wire__crate__infra__fll_infra__question__question_to_schema_impl(ptr, rust_vec_len, data_len),
77 => wire__crate__infra__network_schemas__errors__error_message_from_json_string_impl(ptr, rust_vec_len, data_len),
78 => wire__crate__infra__network_schemas__errors__error_message_to_json_string_impl(ptr, rust_vec_len, data_len),
79 => wire__crate__infra__network_schemas__errors__error_message_to_schema_impl(ptr, rust_vec_len, data_len),
81 => wire__crate__infra__network_schemas__login_requests__login_request_from_json_string_impl(ptr, rust_vec_len, data_len),
82 => wire__crate__infra__network_schemas__login_requests__login_request_to_json_string_impl(ptr, rust_vec_len, data_len),
83 => wire__crate__infra__network_schemas__login_requests__login_request_to_schema_impl(ptr, rust_vec_len, data_len),
85 => wire__crate__infra__network_schemas__login_requests__login_response_from_json_string_impl(ptr, rust_vec_len, data_len),
86 => wire__crate__infra__network_schemas__login_requests__login_response_to_json_string_impl(ptr, rust_vec_len, data_len),
87 => wire__crate__infra__network_schemas__login_requests__login_response_to_schema_impl(ptr, rust_vec_len, data_len),
89 => wire__crate__infra__network_schemas__register_requests__register_request_from_json_string_impl(ptr, rust_vec_len, data_len),
90 => wire__crate__infra__network_schemas__register_requests__register_request_to_json_string_impl(ptr, rust_vec_len, data_len),
91 => wire__crate__infra__network_schemas__register_requests__register_request_to_schema_impl(ptr, rust_vec_len, data_len),
93 => wire__crate__infra__network_schemas__register_requests__register_response_from_json_string_impl(ptr, rust_vec_len, data_len),
94 => wire__crate__infra__network_schemas__register_requests__register_response_to_json_string_impl(ptr, rust_vec_len, data_len),
95 => wire__crate__infra__network_schemas__register_requests__register_response_to_schema_impl(ptr, rust_vec_len, data_len),
97 => wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_from_json_string_impl(ptr, rust_vec_len, data_len),
98 => wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_to_json_string_impl(ptr, rust_vec_len, data_len),
99 => wire__crate__infra__network_schemas__robot_game_requests__robot_games_load_match_request_to_schema_impl(ptr, rust_vec_len, data_len),
101 => wire__crate__infra__network_schemas__socket_protocol__match_state_event__tms_server_match_state_event_from_json_string_impl(ptr, rust_vec_len, data_len),
102 => wire__crate__infra__network_schemas__socket_protocol__match_state_event__tms_server_match_state_event_to_json_string_impl(ptr, rust_vec_len, data_len),
103 => wire__crate__infra__network_schemas__socket_protocol__match_state_event__tms_server_match_state_event_to_schema_impl(ptr, rust_vec_len, data_len),
105 => wire__crate__infra__network_schemas__socket_protocol__match_time_event__tms_server_match_timer_event_from_json_string_impl(ptr, rust_vec_len, data_len),
106 => wire__crate__infra__network_schemas__socket_protocol__match_time_event__tms_server_match_timer_event_to_json_string_impl(ptr, rust_vec_len, data_len),
107 => wire__crate__infra__network_schemas__socket_protocol__match_time_event__tms_server_match_timer_event_to_schema_impl(ptr, rust_vec_len, data_len),
109 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_from_json_string_impl(ptr, rust_vec_len, data_len),
110 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_to_json_string_impl(ptr, rust_vec_len, data_len),
111 => wire__crate__infra__network_schemas__socket_protocol__server_socket_protocol__tms_server_socket_message_to_schema_impl(ptr, rust_vec_len, data_len),
113 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_admin_password_request_from_json_string_impl(ptr, rust_vec_len, data_len),
114 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_admin_password_request_to_json_string_impl(ptr, rust_vec_len, data_len),
115 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_admin_password_request_to_schema_impl(ptr, rust_vec_len, data_len),
117 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_from_json_string_impl(ptr, rust_vec_len, data_len),
118 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_to_json_string_impl(ptr, rust_vec_len, data_len),
119 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_backup_interval_request_to_schema_impl(ptr, rust_vec_len, data_len),
121 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_from_json_string_impl(ptr, rust_vec_len, data_len),
122 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_to_json_string_impl(ptr, rust_vec_len, data_len),
123 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_endgame_timer_length_request_to_schema_impl(ptr, rust_vec_len, data_len),
125 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_from_json_string_impl(ptr, rust_vec_len, data_len),
126 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_to_json_string_impl(ptr, rust_vec_len, data_len),
127 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_name_request_to_schema_impl(ptr, rust_vec_len, data_len),
129 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_from_json_string_impl(ptr, rust_vec_len, data_len),
130 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_to_json_string_impl(ptr, rust_vec_len, data_len),
131 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_retain_backups_request_to_schema_impl(ptr, rust_vec_len, data_len),
133 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_from_json_string_impl(ptr, rust_vec_len, data_len),
134 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_to_json_string_impl(ptr, rust_vec_len, data_len),
135 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_season_request_to_schema_impl(ptr, rust_vec_len, data_len),
137 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_from_json_string_impl(ptr, rust_vec_len, data_len),
138 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_to_json_string_impl(ptr, rust_vec_len, data_len),
139 => wire__crate__infra__network_schemas__tournament_config_requests__tournament_config_set_timer_length_request_to_schema_impl(ptr, rust_vec_len, data_len),
                        _ => unreachable!(),
                    }
                }
                

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::BlueprintType {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {
                    Self::Agnostic => 0.into_dart(),
Self::Seasonal => 1.into_dart(),
                    _ => unreachable!(),
                }
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::BlueprintType {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::BlueprintType> for crate::infra::network_schemas::tournament_config_requests::BlueprintType {
            fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::BlueprintType {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::category_question::CategoricalOption {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.label.into_into_dart().into_dart(),
self.score.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::category_question::CategoricalOption {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::category_question::CategoricalOption> for crate::infra::fll_infra::category_question::CategoricalOption {
            fn into_into_dart(self) -> crate::infra::fll_infra::category_question::CategoricalOption {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::category_question::CategoricalQuestion {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.options.into_into_dart().into_dart(),
self.default_option.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::category_question::CategoricalQuestion {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::category_question::CategoricalQuestion> for crate::infra::fll_infra::category_question::CategoricalQuestion {
            fn into_into_dart(self) -> crate::infra::fll_infra::category_question::CategoricalQuestion {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::errors::ErrorMessage {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.code.into_into_dart().into_dart(),
self.message.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::errors::ErrorMessage {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::errors::ErrorMessage> for crate::infra::network_schemas::errors::ErrorMessage {
            fn into_into_dart(self) -> crate::infra::network_schemas::errors::ErrorMessage {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::fll_blueprint::FllBlueprint {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.robot_game_questions.into_into_dart().into_dart(),
self.robot_game_missions.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::fll_blueprint::FllBlueprint {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::fll_blueprint::FllBlueprint> for crate::infra::fll_infra::fll_blueprint::FllBlueprint {
            fn into_into_dart(self) -> crate::infra::fll_infra::fll_blueprint::FllBlueprint {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::fll_blueprint_map::FllBlueprintMap {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    Vec::<u8>::new().into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::fll_blueprint_map::FllBlueprintMap {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::fll_blueprint_map::FllBlueprintMap> for crate::infra::fll_infra::fll_blueprint_map::FllBlueprintMap {
            fn into_into_dart(self) -> crate::infra::fll_infra::fll_blueprint_map::FllBlueprintMap {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::game_match::GameMatch {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.match_number.into_into_dart().into_dart(),
self.start_time.into_into_dart().into_dart(),
self.end_time.into_into_dart().into_dart(),
self.game_match_tables.into_into_dart().into_dart(),
self.completed.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::game_match::GameMatch {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::game_match::GameMatch> for crate::infra::database_schemas::game_match::GameMatch {
            fn into_into_dart(self) -> crate::infra::database_schemas::game_match::GameMatch {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::game_match::GameMatchTable {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.table.into_into_dart().into_dart(),
self.team_number.into_into_dart().into_dart(),
self.score_submitted.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::game_match::GameMatchTable {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::game_match::GameMatchTable> for crate::infra::database_schemas::game_match::GameMatchTable {
            fn into_into_dart(self) -> crate::infra::database_schemas::game_match::GameMatchTable {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::game_table::GameTable {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.table_name.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::game_table::GameTable {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::game_table::GameTable> for crate::infra::database_schemas::game_table::GameTable {
            fn into_into_dart(self) -> crate::infra::database_schemas::game_table::GameTable {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::judging_pod::JudgingPod {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.pod_name.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::judging_pod::JudgingPod {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::judging_pod::JudgingPod> for crate::infra::database_schemas::judging_pod::JudgingPod {
            fn into_into_dart(self) -> crate::infra::database_schemas::judging_pod::JudgingPod {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::judging_session::JudgingSession {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.session_number.into_into_dart().into_dart(),
self.start_time.into_into_dart().into_dart(),
self.end_time.into_into_dart().into_dart(),
self.judging_session_pods.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::judging_session::JudgingSession {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::judging_session::JudgingSession> for crate::infra::database_schemas::judging_session::JudgingSession {
            fn into_into_dart(self) -> crate::infra::database_schemas::judging_session::JudgingSession {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::judging_session::JudgingSessionPod {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.pod.into_into_dart().into_dart(),
self.team_number.into_into_dart().into_dart(),
self.core_values_submitted.into_into_dart().into_dart(),
self.innovation_submitted.into_into_dart().into_dart(),
self.robot_design_submitted.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::judging_session::JudgingSessionPod {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::judging_session::JudgingSessionPod> for crate::infra::database_schemas::judging_session::JudgingSessionPod {
            fn into_into_dart(self) -> crate::infra::database_schemas::judging_session::JudgingSessionPod {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::login_requests::LoginRequest {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.username.into_into_dart().into_dart(),
self.password.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::login_requests::LoginRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::login_requests::LoginRequest> for crate::infra::network_schemas::login_requests::LoginRequest {
            fn into_into_dart(self) -> crate::infra::network_schemas::login_requests::LoginRequest {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::login_requests::LoginResponse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.roles.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::login_requests::LoginResponse {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::login_requests::LoginResponse> for crate::infra::network_schemas::login_requests::LoginResponse {
            fn into_into_dart(self) -> crate::infra::network_schemas::login_requests::LoginResponse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::seasons::fll_2023::MasterPiece {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    Vec::<u8>::new().into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::seasons::fll_2023::MasterPiece {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::seasons::fll_2023::MasterPiece> for crate::infra::fll_infra::seasons::fll_2023::MasterPiece {
            fn into_into_dart(self) -> crate::infra::fll_infra::seasons::fll_2023::MasterPiece {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::mission::Mission {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.id.into_into_dart().into_dart(),
self.label.into_into_dart().into_dart(),
self.image_url.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::mission::Mission {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::mission::Mission> for crate::infra::fll_infra::mission::Mission {
            fn into_into_dart(self) -> crate::infra::fll_infra::mission::Mission {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::question::Question {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.id.into_into_dart().into_dart(),
self.label.into_into_dart().into_dart(),
self.label_short.into_into_dart().into_dart(),
self.input.into_into_dart().into_dart(),
self.rules.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::question::Question {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::question::Question> for crate::infra::fll_infra::question::Question {
            fn into_into_dart(self) -> crate::infra::fll_infra::question::Question {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::question::QuestionAnswer {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.question_id.into_into_dart().into_dart(),
self.answer.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::question::QuestionAnswer {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::question::QuestionAnswer> for crate::infra::fll_infra::question::QuestionAnswer {
            fn into_into_dart(self) -> crate::infra::fll_infra::question::QuestionAnswer {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::question::QuestionInput {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {crate::infra::fll_infra::question::QuestionInput::Categorical(field0) => { [0.into_dart(),
field0.into_into_dart().into_dart()].into_dart() }
 _ => { unimplemented!(""); }}
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::question::QuestionInput {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::question::QuestionInput> for crate::infra::fll_infra::question::QuestionInput {
            fn into_into_dart(self) -> crate::infra::fll_infra::question::QuestionInput {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::rule_engine::QuestionRule {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.condition.into_into_dart().into_dart(),
self.output.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::rule_engine::QuestionRule {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::rule_engine::QuestionRule> for crate::infra::fll_infra::rule_engine::QuestionRule {
            fn into_into_dart(self) -> crate::infra::fll_infra::rule_engine::QuestionRule {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::fll_infra::question::QuestionValidationError {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.question_ids.into_into_dart().into_dart(),
self.message.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::fll_infra::question::QuestionValidationError {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::fll_infra::question::QuestionValidationError> for crate::infra::fll_infra::question::QuestionValidationError {
            fn into_into_dart(self) -> crate::infra::fll_infra::question::QuestionValidationError {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::register_requests::RegisterRequest {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.username.into_into_dart().into_dart(),
self.password.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::register_requests::RegisterRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::register_requests::RegisterRequest> for crate::infra::network_schemas::register_requests::RegisterRequest {
            fn into_into_dart(self) -> crate::infra::network_schemas::register_requests::RegisterRequest {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::register_requests::RegisterResponse {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auth_token.into_into_dart().into_dart(),
self.uuid.into_into_dart().into_dart(),
self.url.into_into_dart().into_dart(),
self.server_ip.into_into_dart().into_dart(),
self.roles.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::register_requests::RegisterResponse {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::register_requests::RegisterResponse> for crate::infra::network_schemas::register_requests::RegisterResponse {
            fn into_into_dart(self) -> crate::infra::network_schemas::register_requests::RegisterResponse {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.game_match_numbers.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest> for crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {
            fn into_into_dart(self) -> crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::team::Team {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.number.into_into_dart().into_dart(),
self.name.into_into_dart().into_dart(),
self.affiliation.into_into_dart().into_dart(),
self.ranking.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::team::Team {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::team::Team> for crate::infra::database_schemas::team::Team {
            fn into_into_dart(self) -> crate::infra::database_schemas::team::Team {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::date_time::TmsDate {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.year.into_into_dart().into_dart(),
self.month.into_into_dart().into_dart(),
self.day.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::date_time::TmsDate {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::date_time::TmsDate> for crate::infra::database_schemas::date_time::TmsDate {
            fn into_into_dart(self) -> crate::infra::database_schemas::date_time::TmsDate {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::date_time::TmsDateTime {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.date.into_into_dart().into_dart(),
self.time.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::date_time::TmsDateTime {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::date_time::TmsDateTime> for crate::infra::database_schemas::date_time::TmsDateTime {
            fn into_into_dart(self) -> crate::infra::database_schemas::date_time::TmsDateTime {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {
                    Self::Running => 0.into_dart(),
Self::Ready => 1.into_dart(),
Self::Load => 2.into_dart(),
Self::Unload => 3.into_dart(),
                    _ => unreachable!(),
                }
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState> for crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState {
            fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.state.into_into_dart().into_dart(),
self.game_match_tables.into_into_dart().into_dart(),
self.game_match_numbers.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent> for crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent {
            fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.time.into_into_dart().into_dart(),
self.state.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent> for crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent {
            fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {
                    Self::StartWithCountdown => 0.into_dart(),
Self::Start => 1.into_dart(),
Self::Stop => 2.into_dart(),
Self::End => 3.into_dart(),
Self::Time => 4.into_dart(),
Self::Endgame => 5.into_dart(),
Self::Reload => 6.into_dart(),
                    _ => unreachable!(),
                }
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState> for crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState {
            fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    match self {
                    Self::PurgeEvent => 0.into_dart(),
Self::MatchTimerEvent => 1.into_dart(),
Self::MatchStateEvent => 2.into_dart(),
                    _ => unreachable!(),
                }
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent> for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {
            fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.auth_token.into_into_dart().into_dart(),
self.message_event.into_into_dart().into_dart(),
self.message.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage> for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
            fn into_into_dart(self) -> crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::date_time::TmsTime {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.hour.into_into_dart().into_dart(),
self.minute.into_into_dart().into_dart(),
self.second.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::date_time::TmsTime {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::date_time::TmsTime> for crate::infra::database_schemas::date_time::TmsTime {
            fn into_into_dart(self) -> crate::infra::database_schemas::date_time::TmsTime {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::TmsTreeRole {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.role_id.into_into_dart().into_dart(),
self.password.into_into_dart().into_dart(),
self.read_echo_trees.into_into_dart().into_dart(),
self.read_write_echo_trees.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::TmsTreeRole {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::TmsTreeRole> for crate::infra::TmsTreeRole {
            fn into_into_dart(self) -> crate::infra::TmsTreeRole {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.title.into_into_dart().into_dart(),
self.blueprint.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint> for crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint {
            fn into_into_dart(self) -> crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::tournament_config::TournamentConfig {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.name.into_into_dart().into_dart(),
self.backup_interval.into_into_dart().into_dart(),
self.retain_backups.into_into_dart().into_dart(),
self.end_game_timer_length.into_into_dart().into_dart(),
self.timer_length.into_into_dart().into_dart(),
self.season.into_into_dart().into_dart(),
self.blueprint_type.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::tournament_config::TournamentConfig {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::tournament_config::TournamentConfig> for crate::infra::database_schemas::tournament_config::TournamentConfig {
            fn into_into_dart(self) -> crate::infra::database_schemas::tournament_config::TournamentConfig {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.admin_password.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest> for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest {
            fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.interval.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest> for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {
            fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.timer_length.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest> for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {
            fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.name.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest> for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {
            fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.retain_backups.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest> for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {
            fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.blueprint_type.into_into_dart().into_dart(),
self.season.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest> for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {
            fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.timer_length.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest> for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {
            fn into_into_dart(self) -> crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {
                self
            }
        }
// Codec=Dco (DartCObject based), see doc to use other codecs
            impl flutter_rust_bridge::IntoDart for crate::infra::database_schemas::user::User {
                fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
                    [
                    self.username.into_into_dart().into_dart(),
self.password.into_into_dart().into_dart(),
self.roles.into_into_dart().into_dart()
                ].into_dart()
                }
            }
            impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::infra::database_schemas::user::User {}
impl flutter_rust_bridge::IntoIntoDart<crate::infra::database_schemas::user::User> for crate::infra::database_schemas::user::User {
            fn into_into_dart(self) -> crate::infra::database_schemas::user::User {
                self
            }
        }

                impl SseEncode for String {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<u8>>::sse_encode(self.into_bytes(), serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::tournament_config_requests::BlueprintType {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {crate::infra::network_schemas::tournament_config_requests::BlueprintType::Agnostic => { 0 }
crate::infra::network_schemas::tournament_config_requests::BlueprintType::Seasonal => { 1 }
 _ => { unimplemented!(""); }}, serializer);}
                }
                
                impl SseEncode for bool {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u8(self as _).unwrap();}
                }
                
                impl SseEncode for crate::infra::fll_infra::category_question::CategoricalOption {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.label, serializer);
<i32>::sse_encode(self.score, serializer);}
                }
                
                impl SseEncode for crate::infra::fll_infra::category_question::CategoricalQuestion {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<crate::infra::fll_infra::category_question::CategoricalOption>>::sse_encode(self.options, serializer);
<String>::sse_encode(self.default_option, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::errors::ErrorMessage {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<u16>::sse_encode(self.code, serializer);
<String>::sse_encode(self.message, serializer);}
                }
                
                impl SseEncode for crate::infra::fll_infra::fll_blueprint::FllBlueprint {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<crate::infra::fll_infra::question::Question>>::sse_encode(self.robot_game_questions, serializer);
<Vec<crate::infra::fll_infra::mission::Mission>>::sse_encode(self.robot_game_missions, serializer);}
                }
                
                impl SseEncode for crate::infra::fll_infra::fll_blueprint_map::FllBlueprintMap {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
                }
                
                impl SseEncode for crate::infra::database_schemas::game_match::GameMatch {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.match_number, serializer);
<crate::infra::database_schemas::date_time::TmsDateTime>::sse_encode(self.start_time, serializer);
<crate::infra::database_schemas::date_time::TmsDateTime>::sse_encode(self.end_time, serializer);
<Vec<crate::infra::database_schemas::game_match::GameMatchTable>>::sse_encode(self.game_match_tables, serializer);
<bool>::sse_encode(self.completed, serializer);}
                }
                
                impl SseEncode for crate::infra::database_schemas::game_match::GameMatchTable {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.table, serializer);
<String>::sse_encode(self.team_number, serializer);
<bool>::sse_encode(self.score_submitted, serializer);}
                }
                
                impl SseEncode for crate::infra::database_schemas::game_table::GameTable {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.table_name, serializer);}
                }
                
                impl SseEncode for i32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_i32::<NativeEndian>(self).unwrap();}
                }
                
                impl SseEncode for crate::infra::database_schemas::judging_pod::JudgingPod {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.pod_name, serializer);}
                }
                
                impl SseEncode for crate::infra::database_schemas::judging_session::JudgingSession {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.session_number, serializer);
<crate::infra::database_schemas::date_time::TmsDateTime>::sse_encode(self.start_time, serializer);
<crate::infra::database_schemas::date_time::TmsDateTime>::sse_encode(self.end_time, serializer);
<Vec<crate::infra::database_schemas::judging_session::JudgingSessionPod>>::sse_encode(self.judging_session_pods, serializer);}
                }
                
                impl SseEncode for crate::infra::database_schemas::judging_session::JudgingSessionPod {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.pod, serializer);
<String>::sse_encode(self.team_number, serializer);
<bool>::sse_encode(self.core_values_submitted, serializer);
<bool>::sse_encode(self.innovation_submitted, serializer);
<bool>::sse_encode(self.robot_design_submitted, serializer);}
                }
                
                impl SseEncode for Vec<String> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <String>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<crate::infra::fll_infra::category_question::CategoricalOption> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::infra::fll_infra::category_question::CategoricalOption>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<crate::infra::database_schemas::game_match::GameMatchTable> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::infra::database_schemas::game_match::GameMatchTable>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<crate::infra::database_schemas::judging_session::JudgingSessionPod> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::infra::database_schemas::judging_session::JudgingSessionPod>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<crate::infra::fll_infra::mission::Mission> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::infra::fll_infra::mission::Mission>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<u8> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <u8>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<crate::infra::fll_infra::question::Question> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::infra::fll_infra::question::Question>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<crate::infra::fll_infra::question::QuestionAnswer> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::infra::fll_infra::question::QuestionAnswer>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<crate::infra::fll_infra::rule_engine::QuestionRule> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::infra::fll_infra::rule_engine::QuestionRule>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<crate::infra::fll_infra::question::QuestionValidationError> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::infra::fll_infra::question::QuestionValidationError>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<(String,bool,)> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <(String,bool,)>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for Vec<crate::infra::TmsTreeRole> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.len() as _, serializer);
        for item in self { <crate::infra::TmsTreeRole>::sse_encode(item, serializer); }}
                }
                
                impl SseEncode for crate::infra::network_schemas::login_requests::LoginRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.username, serializer);
<String>::sse_encode(self.password, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::login_requests::LoginResponse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<crate::infra::TmsTreeRole>>::sse_encode(self.roles, serializer);}
                }
                
                impl SseEncode for crate::infra::fll_infra::seasons::fll_2023::MasterPiece {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
                }
                
                impl SseEncode for crate::infra::fll_infra::mission::Mission {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.id, serializer);
<String>::sse_encode(self.label, serializer);
<String>::sse_encode(self.image_url, serializer);}
                }
                
                impl SseEncode for Option<String> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <String>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<crate::infra::database_schemas::date_time::TmsDate> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <crate::infra::database_schemas::date_time::TmsDate>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<crate::infra::database_schemas::date_time::TmsTime> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <crate::infra::database_schemas::date_time::TmsTime>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<u32> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <u32>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for Option<Vec<crate::infra::fll_infra::question::QuestionValidationError>> {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<bool>::sse_encode(self.is_some(), serializer);
                if let Some(value) = self {
                    <Vec<crate::infra::fll_infra::question::QuestionValidationError>>::sse_encode(value, serializer);
                }}
                }
                
                impl SseEncode for crate::infra::fll_infra::question::Question {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.id, serializer);
<String>::sse_encode(self.label, serializer);
<String>::sse_encode(self.label_short, serializer);
<crate::infra::fll_infra::question::QuestionInput>::sse_encode(self.input, serializer);
<Vec<crate::infra::fll_infra::rule_engine::QuestionRule>>::sse_encode(self.rules, serializer);}
                }
                
                impl SseEncode for crate::infra::fll_infra::question::QuestionAnswer {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.question_id, serializer);
<String>::sse_encode(self.answer, serializer);}
                }
                
                impl SseEncode for crate::infra::fll_infra::question::QuestionInput {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {match self {crate::infra::fll_infra::question::QuestionInput::Categorical(field0) => { <i32>::sse_encode(0, serializer); <crate::infra::fll_infra::category_question::CategoricalQuestion>::sse_encode(field0, serializer);
 }
 _ => { unimplemented!(""); }}}
                }
                
                impl SseEncode for crate::infra::fll_infra::rule_engine::QuestionRule {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.condition, serializer);
<i32>::sse_encode(self.output, serializer);}
                }
                
                impl SseEncode for crate::infra::fll_infra::question::QuestionValidationError {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.question_ids, serializer);
<String>::sse_encode(self.message, serializer);}
                }
                
                impl SseEncode for (String,bool,) {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.0, serializer);
<bool>::sse_encode(self.1, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::register_requests::RegisterRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Option<String>>::sse_encode(self.username, serializer);
<Option<String>>::sse_encode(self.password, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::register_requests::RegisterResponse {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.auth_token, serializer);
<String>::sse_encode(self.uuid, serializer);
<String>::sse_encode(self.url, serializer);
<String>::sse_encode(self.server_ip, serializer);
<Vec<crate::infra::TmsTreeRole>>::sse_encode(self.roles, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::robot_game_requests::RobotGamesLoadMatchRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Vec<String>>::sse_encode(self.game_match_numbers, serializer);}
                }
                
                impl SseEncode for crate::infra::database_schemas::team::Team {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.number, serializer);
<String>::sse_encode(self.name, serializer);
<String>::sse_encode(self.affiliation, serializer);
<u32>::sse_encode(self.ranking, serializer);}
                }
                
                impl SseEncode for crate::infra::database_schemas::date_time::TmsDate {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(self.year, serializer);
<u32>::sse_encode(self.month, serializer);
<u32>::sse_encode(self.day, serializer);}
                }
                
                impl SseEncode for crate::infra::database_schemas::date_time::TmsDateTime {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Option<crate::infra::database_schemas::date_time::TmsDate>>::sse_encode(self.date, serializer);
<Option<crate::infra::database_schemas::date_time::TmsTime>>::sse_encode(self.time, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState::Running => { 0 }
crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState::Ready => { 1 }
crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState::Load => { 2 }
crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState::Unload => { 3 }
 _ => { unimplemented!(""); }}, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchStateEvent {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<crate::infra::network_schemas::socket_protocol::match_state_event::TmsServerMatchState>::sse_encode(self.state, serializer);
<Vec<(String,bool,)>>::sse_encode(self.game_match_tables, serializer);
<Vec<String>>::sse_encode(self.game_match_numbers, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerEvent {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<Option<u32>>::sse_encode(self.time, serializer);
<crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState>::sse_encode(self.state, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::StartWithCountdown => { 0 }
crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::Start => { 1 }
crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::Stop => { 2 }
crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::End => { 3 }
crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::Time => { 4 }
crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::Endgame => { 5 }
crate::infra::network_schemas::socket_protocol::match_time_event::TmsServerMatchTimerState::Reload => { 6 }
 _ => { unimplemented!(""); }}, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<i32>::sse_encode(match self {crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::PurgeEvent => { 0 }
crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchTimerEvent => { 1 }
crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent::MatchStateEvent => { 2 }
 _ => { unimplemented!(""); }}, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketMessage {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.auth_token, serializer);
<crate::infra::network_schemas::socket_protocol::server_socket_protocol::TmsServerSocketEvent>::sse_encode(self.message_event, serializer);
<Option<String>>::sse_encode(self.message, serializer);}
                }
                
                impl SseEncode for crate::infra::database_schemas::date_time::TmsTime {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<u32>::sse_encode(self.hour, serializer);
<u32>::sse_encode(self.minute, serializer);
<u32>::sse_encode(self.second, serializer);}
                }
                
                impl SseEncode for crate::infra::TmsTreeRole {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.role_id, serializer);
<String>::sse_encode(self.password, serializer);
<Vec<String>>::sse_encode(self.read_echo_trees, serializer);
<Vec<String>>::sse_encode(self.read_write_echo_trees, serializer);}
                }
                
                impl SseEncode for crate::infra::database_schemas::tournament_blueprint::TournamentBlueprint {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.title, serializer);
<crate::infra::fll_infra::fll_blueprint::FllBlueprint>::sse_encode(self.blueprint, serializer);}
                }
                
                impl SseEncode for crate::infra::database_schemas::tournament_config::TournamentConfig {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.name, serializer);
<u32>::sse_encode(self.backup_interval, serializer);
<u32>::sse_encode(self.retain_backups, serializer);
<u32>::sse_encode(self.end_game_timer_length, serializer);
<u32>::sse_encode(self.timer_length, serializer);
<Option<String>>::sse_encode(self.season, serializer);
<crate::infra::network_schemas::tournament_config_requests::BlueprintType>::sse_encode(self.blueprint_type, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetAdminPasswordRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.admin_password, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetBackupIntervalRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<u32>::sse_encode(self.interval, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetEndgameTimerLengthRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<u32>::sse_encode(self.timer_length, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetNameRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.name, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetRetainBackupsRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<u32>::sse_encode(self.retain_backups, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetSeasonRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<crate::infra::network_schemas::tournament_config_requests::BlueprintType>::sse_encode(self.blueprint_type, serializer);
<Option<String>>::sse_encode(self.season, serializer);}
                }
                
                impl SseEncode for crate::infra::network_schemas::tournament_config_requests::TournamentConfigSetTimerLengthRequest {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<u32>::sse_encode(self.timer_length, serializer);}
                }
                
                impl SseEncode for u16 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u16::<NativeEndian>(self).unwrap();}
                }
                
                impl SseEncode for u32 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u32::<NativeEndian>(self).unwrap();}
                }
                
                impl SseEncode for u8 {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {serializer.cursor.write_u8(self).unwrap();}
                }
                
                impl SseEncode for () {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
                }
                
                impl SseEncode for crate::infra::database_schemas::user::User {
                    // Codec=Sse (Serialization based), see doc to use other codecs
                    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {<String>::sse_encode(self.username, serializer);
<String>::sse_encode(self.password, serializer);
<Vec<String>>::sse_encode(self.roles, serializer);}
                }
                


        
        
        #[cfg(not(target_family = "wasm"))]
        mod io {
            // This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.2.0.



// Section: imports

use crate::infra::DataSchemeExtensions;
use crate::infra::fll_infra::seasons::BaseSeason;
use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};use super::*;

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();


        }
        #[cfg(not(target_family = "wasm"))]
        pub use io::*;
        
        
        /// cbindgen:ignore
        #[cfg(target_family = "wasm")]
        mod web {
            // This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.2.0.



// Section: imports

use crate::infra::DataSchemeExtensions;
use crate::infra::fll_infra::seasons::BaseSeason;
use flutter_rust_bridge::{Handler, IntoIntoDart};
use flutter_rust_bridge::for_generated::{Lockable, transform_result_dco, Lifetimeable};
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, WriteBytesExt, ReadBytesExt};use super::*;
                use flutter_rust_bridge::for_generated::wasm_bindgen;
                use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;


// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_web!();


        }
        #[cfg(target_family = "wasm")]
        pub use web::*;
        