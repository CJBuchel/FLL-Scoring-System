// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.6.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `fmt`

class User {
  final String username;
  final String password;
  final List<String> roles;

  const User.raw({
    required this.username,
    required this.password,
    required this.roles,
  });

  static User default_() =>
      TmsRustLib.instance.api.crateInfraDatabaseSchemasUserUserDefault();

  static User fromJsonString({required String json}) => TmsRustLib.instance.api
      .crateInfraDatabaseSchemasUserUserFromJsonString(json: json);

  UserPermissions getPermissions() =>
      TmsRustLib.instance.api.crateInfraDatabaseSchemasUserUserGetPermissions(
        that: this,
      );

  bool hasPermissionAccess({required UserPermissions permissions}) =>
      TmsRustLib.instance.api
          .crateInfraDatabaseSchemasUserUserHasPermissionAccess(
              that: this, permissions: permissions);

  bool hasRole({required String role}) => TmsRustLib.instance.api
      .crateInfraDatabaseSchemasUserUserHasRole(that: this, role: role);

  bool hasRoleAccess({required List<String> roles}) => TmsRustLib.instance.api
      .crateInfraDatabaseSchemasUserUserHasRoleAccess(that: this, roles: roles);

  factory User(
          {required String username,
          required String password,
          required List<String> roles}) =>
      TmsRustLib.instance.api.crateInfraDatabaseSchemasUserUserNew(
          username: username, password: password, roles: roles);

  String toJsonString() =>
      TmsRustLib.instance.api.crateInfraDatabaseSchemasUserUserToJsonString(
        that: this,
      );

  static String toSchema() =>
      TmsRustLib.instance.api.crateInfraDatabaseSchemasUserUserToSchema();

  @override
  int get hashCode => username.hashCode ^ password.hashCode ^ roles.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is User &&
          runtimeType == other.runtimeType &&
          username == other.username &&
          password == other.password &&
          roles == other.roles;
}

class UserPermissions {
  final bool? admin;
  final bool? referee;
  final bool? headReferee;
  final bool? judge;
  final bool? judgeAdvisor;
  final bool? scoreKeeper;
  final bool? emcee;
  final bool? av;

  const UserPermissions.raw({
    this.admin,
    this.referee,
    this.headReferee,
    this.judge,
    this.judgeAdvisor,
    this.scoreKeeper,
    this.emcee,
    this.av,
  });

  static UserPermissions default_() => TmsRustLib.instance.api
      .crateInfraDatabaseSchemasUserUserPermissionsDefault();

  static UserPermissions fromJsonString({required String json}) => TmsRustLib
      .instance.api
      .crateInfraDatabaseSchemasUserUserPermissionsFromJsonString(json: json);

  static UserPermissions fromRoles({required List<String> roles}) =>
      TmsRustLib.instance.api
          .crateInfraDatabaseSchemasUserUserPermissionsFromRoles(roles: roles);

  UserPermissions getMergedPermissions(
          {required UserPermissions permissions}) =>
      TmsRustLib.instance.api
          .crateInfraDatabaseSchemasUserUserPermissionsGetMergedPermissions(
              that: this, permissions: permissions);

  List<String> getRoles() => TmsRustLib.instance.api
          .crateInfraDatabaseSchemasUserUserPermissionsGetRoles(
        that: this,
      );

  bool hasRoleAccess({required List<String> roles}) => TmsRustLib.instance.api
      .crateInfraDatabaseSchemasUserUserPermissionsHasRoleAccess(
          that: this, roles: roles);

  factory UserPermissions(
          {bool? admin,
          bool? referee,
          bool? headReferee,
          bool? judge,
          bool? judgeAdvisor,
          bool? scoreKeeper,
          bool? emcee,
          bool? av}) =>
      TmsRustLib.instance.api.crateInfraDatabaseSchemasUserUserPermissionsNew(
          admin: admin,
          referee: referee,
          headReferee: headReferee,
          judge: judge,
          judgeAdvisor: judgeAdvisor,
          scoreKeeper: scoreKeeper,
          emcee: emcee,
          av: av);

  String toJsonString() => TmsRustLib.instance.api
          .crateInfraDatabaseSchemasUserUserPermissionsToJsonString(
        that: this,
      );

  static String toSchema() => TmsRustLib.instance.api
      .crateInfraDatabaseSchemasUserUserPermissionsToSchema();

  @override
  int get hashCode =>
      admin.hashCode ^
      referee.hashCode ^
      headReferee.hashCode ^
      judge.hashCode ^
      judgeAdvisor.hashCode ^
      scoreKeeper.hashCode ^
      emcee.hashCode ^
      av.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UserPermissions &&
          runtimeType == other.runtimeType &&
          admin == other.admin &&
          referee == other.referee &&
          headReferee == other.headReferee &&
          judge == other.judge &&
          judgeAdvisor == other.judgeAdvisor &&
          scoreKeeper == other.scoreKeeper &&
          emcee == other.emcee &&
          av == other.av;
}
