// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `default`, `default`, `default`, `default`, `default`, `default`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`

class TournamentConfigSetBackupIntervalRequest {
  final int interval;

  const TournamentConfigSetBackupIntervalRequest({
    required this.interval,
  });

  static TournamentConfigSetBackupIntervalRequest fromJsonString(
          {required String json}) =>
      RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetBackupIntervalRequestFromJsonString(
              json: json);

  String toJsonString() => RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetBackupIntervalRequestToJsonString(
        that: this,
      );

  static String toSchema() => RustLib.instance.api
      .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetBackupIntervalRequestToSchema();

  @override
  int get hashCode => interval.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TournamentConfigSetBackupIntervalRequest &&
          runtimeType == other.runtimeType &&
          interval == other.interval;
}

class TournamentConfigSetEndgameTimerLengthRequest {
  final int timerLength;

  const TournamentConfigSetEndgameTimerLengthRequest({
    required this.timerLength,
  });

  static TournamentConfigSetEndgameTimerLengthRequest fromJsonString(
          {required String json}) =>
      RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetEndgameTimerLengthRequestFromJsonString(
              json: json);

  String toJsonString() => RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetEndgameTimerLengthRequestToJsonString(
        that: this,
      );

  static String toSchema() => RustLib.instance.api
      .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetEndgameTimerLengthRequestToSchema();

  @override
  int get hashCode => timerLength.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TournamentConfigSetEndgameTimerLengthRequest &&
          runtimeType == other.runtimeType &&
          timerLength == other.timerLength;
}

class TournamentConfigSetNameRequest {
  final String name;

  const TournamentConfigSetNameRequest({
    required this.name,
  });

  static TournamentConfigSetNameRequest fromJsonString(
          {required String json}) =>
      RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetNameRequestFromJsonString(
              json: json);

  String toJsonString() => RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetNameRequestToJsonString(
        that: this,
      );

  static String toSchema() => RustLib.instance.api
      .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetNameRequestToSchema();

  @override
  int get hashCode => name.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TournamentConfigSetNameRequest &&
          runtimeType == other.runtimeType &&
          name == other.name;
}

class TournamentConfigSetRetainBackupsRequest {
  final int retainBackups;

  const TournamentConfigSetRetainBackupsRequest({
    required this.retainBackups,
  });

  static TournamentConfigSetRetainBackupsRequest fromJsonString(
          {required String json}) =>
      RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetRetainBackupsRequestFromJsonString(
              json: json);

  String toJsonString() => RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetRetainBackupsRequestToJsonString(
        that: this,
      );

  static String toSchema() => RustLib.instance.api
      .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetRetainBackupsRequestToSchema();

  @override
  int get hashCode => retainBackups.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TournamentConfigSetRetainBackupsRequest &&
          runtimeType == other.runtimeType &&
          retainBackups == other.retainBackups;
}

class TournamentConfigSetSeasonRequest {
  final String season;

  const TournamentConfigSetSeasonRequest({
    required this.season,
  });

  static TournamentConfigSetSeasonRequest fromJsonString(
          {required String json}) =>
      RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetSeasonRequestFromJsonString(
              json: json);

  String toJsonString() => RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetSeasonRequestToJsonString(
        that: this,
      );

  static String toSchema() => RustLib.instance.api
      .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetSeasonRequestToSchema();

  @override
  int get hashCode => season.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TournamentConfigSetSeasonRequest &&
          runtimeType == other.runtimeType &&
          season == other.season;
}

class TournamentConfigSetTimerLengthRequest {
  final int timerLength;

  const TournamentConfigSetTimerLengthRequest({
    required this.timerLength,
  });

  static TournamentConfigSetTimerLengthRequest fromJsonString(
          {required String json}) =>
      RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetTimerLengthRequestFromJsonString(
              json: json);

  String toJsonString() => RustLib.instance.api
          .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetTimerLengthRequestToJsonString(
        that: this,
      );

  static String toSchema() => RustLib.instance.api
      .crateInfraNetworkSchemasTournamentConfigRequestsTournamentConfigSetTimerLengthRequestToSchema();

  @override
  int get hashCode => timerLength.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is TournamentConfigSetTimerLengthRequest &&
          runtimeType == other.runtimeType &&
          timerLength == other.timerLength;
}
