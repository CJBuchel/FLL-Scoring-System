
resources: 
- repo: self

stages:
- stage: Codegen
  displayName: 'Code Generation'
  jobs:
  - job: SetupAndCodegen
    displayName: 'Setup and Codegen'
    pool:
      vmImage: 'ubuntu-latest'
    steps:

      # 
      # Caching
      # 

      # Cache Cargo registry
      - task: Cache@2
        inputs:
          key: 'cargo-registry | "$(Agent.OS)" | $(Build.SourcesDirectory)/Cargo.lock'
          restoreKeys: 'cargo-registry | "$(Agent.OS)"'
          path: $(HOME)/.cargo/registry
        displayName: 'Cache Cargo Registry'
      
      # Cache Cargo build
      - task: Cache@2
        inputs:
          key: 'cargo-build | "$(Agent.OS)" | $(Build.SourcesDirectory)/Cargo.lock'
          restoreKeys: 'cargo-build | "$(Agent.OS)"'
          path: $(Build.SourcesDirectory)/target
        displayName: 'Cache Cargo Build'

      # Cache Rust toolchain
      - task: Cache@2
        inputs:
          key: 'rust-toolchain | "$(Agent.OS)"'
          restoreKeys: 'rust-toolchain | "$(Agent.OS)"'
          path: $(HOME)/.rustup/toolchains
        displayName: 'Cache Rust Toolchain'
      
      # Cache Cargo bin
      - task: Cache@2
        inputs:
          key: 'cargo-bin | "$(Agent.OS)"'
          restoreKeys: 'cargo-bin | "$(Agent.OS)"'
          path: $(HOME)/.cargo/bin
        displayName: 'Cache Cargo Bin'

      # Cache flutter
      - task: Cache@2
        displayName: 'Cache Flutter Dependencies'
        inputs:
          key: 'flutter | "$(Agent.OS)"'
          restoreKeys: 'flutter | "$(Agent.OS)"'
          path: $(Pipeline.Workspace)/.pub-cache
      
      #
      # Install/Building
      #

      # install nightly toolchain
      - task: Rustup@1
        displayName: 'Install nightly toolchain'
        inputs:
          rustupCommand: 'toolchain'
          rustupCommandArguments: 'install nightly'
          verbose: false
      # add rust-src for codegen
      - task: Rustup@1
        displayName: 'Add rust-src for codegen'
        inputs:
          rustupCommand: '+nightly'
          rustupCommandArguments: 'component add rust-src'
          verbose: false
      # add wasm target for web codegen
      - task: Rustup@1
        displayName: 'Add wasm target for web codegen'
        inputs:
          rustupCommand: '+nightly'
          rustupCommandArguments: 'target add wasm32-unknown-unknown'
          verbose: false
      # Install wasm pack (check if already installed)
      - script: |
          if ! command -v wasm-pack &> /dev/null; then
            echo "Installing wasm-pack"
            cargo install wasm-pack
          else
            echo "wasm-pack is already installed"
          fi
        displayName: 'Install wasm-pack'
      # rustup default to nightly for codegen (needed for wasm)
      - task: Rustup@1
        displayName: 'Set default toolchain to nightly'
        inputs:
          rustupCommand: 'default'
          rustupCommandArguments: 'nightly'
          verbose: false
      # install FRB (cargo task uses manifest, using script instead)
      - script: |
          if ! command -v flutter_rust_bridge_codegen &> /dev/null; then
            echo "Installing FRB"
            cargo install flutter_rust_bridge_codegen
          else
            echo "FRB already installed"
          fi
        displayName: 'Install FRB'
      # Flutter install
      - task: FlutterInstall@0
        displayName: 'Install flutter'
        inputs:
          mode: 'auto'
          channel: 'stable'
          version: 'custom'
          customVersion: '3.22.2'
      # run the codegen
      - script: flutter_rust_bridge_codegen generate --dart-entrypoint-class-name TmsRustLib --rust-input crate::infra --rust-root tms-infra --dart-output tms-client/lib/generated
        displayName: 'Run Codegen'
      # run the wasm pre codegen
      - script: wasm-pack build tms-infra --target no-modules --out-dir tms-client/web/pkg --no-typescript --out-name tms_infra --dev -- -Z build-std=std,panic_abort
        displayName: 'Run Wasm Pre-Codegen'
      # run the wasm codegen
      - script: (cd $(pwd)/tms-client && dart run flutter_rust_bridge build-web --dart-root . --rust-root ../tms-infra)
        displayName: 'Run Wasm Codegen'


# - stage: Build
# - stage: Test
# - stage: Release