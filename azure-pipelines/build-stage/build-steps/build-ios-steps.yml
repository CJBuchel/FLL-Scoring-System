
steps:
  - task: InstallAppleCertificate@2
    displayName: "Install Apple Certificate"
    inputs:
      certSecureFile: '$(p12_alias)'
      certPwd: '$(cert_pass)'
      keychain: 'temp'
      deleteCert: true

  - task: InstallAppleProvisioningProfile@1
    displayName: "Install Provisioning Profile"
    inputs:
      provisioningProfileLocation: 'secureFiles'
      provProfileSecureFile: '$(pp_alias)'
      removeProfile: true

  - script: |
      echo 'Deleting DerivedData...'
      rm -rf ~/Library/Developer/Xcode/DerivedData
    displayName: 'Delete any lingering DerivedData'

  # Build the flutter app
  - task: FlutterBuild@0
    displayName: "Build Flutter App for IOS"
    inputs:
      target: 'ios'
      projectDirectory: './client'
      debugMode: false
      profileMode: false
      iosCodesign: false
      extraArgs: '--release'

  # uninstall and reinstall pods
  - script: |
      echo "uninstalling all cocoapods versions"
      sudo gem uninstall cocoapods -ax
      echo "installing cocoapods version latest"
      sudo gem install cocoapods --pre
    displayName: 'Uninstall and Reinstall Pods'

  # AIO build and sign
  # - task: Xcode@5
  #   displayName: "Build & Code sign IPA for Distribution"
  #   inputs:
  #     # general
  #     args: '-verbose'
  #     actions: 'archive' # build or archive
  #     xcWorkspacePath: './client/ios/Runner.xcworkspace'
  #     workingDirectory: './client/ios'
      
  #     # configuration
  #     scheme: 'Runner'
  #     sdk: 'iphoneos'
  #     configuration: 'release'
  #     xcodeVersion: 'default'

  #     # code signing
  #     packageApp: true
  #     signingOption: 'manual'
  #     signingIdentity: '$(APPLE_CERTIFICATE_SIGNING_IDENTITY)'
  #     provisioningProfileUuid: '$(APPLE_PROV_PROFILE_UUID)'

  #     # platform for xcode test
  #     destinationPlatformOption: 'iOS'
  #     destinationTypeOption: 'simulators'
  #     destinationSimulators: 'iPhone 14'

  #     # exporting
  #     # archivePath: 'client/ios/Runner.xcarchive'
  #     # exportPath: 'client/ios/build'
  #     exportOptions: 'specify'
  #     exportMethod: 'app-store'
  #     exportTeamId: 'B2B876ZH94'
  #     teamId: 'B2B876ZH94'

  # Generate the IPA
  - task: Xcode@5
    displayName: "Build & Generate IPA for Distribution"
    inputs:
      # general
      # args: '-verbose'
      packageApp: true
      actions: 'archive' # build or archive
      workingDirectory: './client/ios'
      xcWorkspacePath: './client/ios/Runner.xcworkspace'
      
      # configuration
      scheme: 'Runner'
      sdk: 'iphoneos'
      configuration: 'release'
      xcodeVersion: 'default'
      signingOption: 'nosign'

      # export archive path
      exportOptions: 'specify'
      exportMethod: 'app-store'
      teamId: 'B2B876ZH94'
      exportTeamId: 'B2B876ZH94'
      archivePath: 'client/ios/Runner.xcarchive'

  - script: |
      # Define paths
      ARCHIVE_PATH="client/ios/Runner.xcarchive"
      EXPORT_PATH="$(Build.ArtifactStagingDirectory)/ExportedApp"
      EXPORT_OPTIONS_PLIST="$(Build.ArtifactStagingDirectory)/exportOptions.plist"

      # Create the exportOptions.plist for signing
      cat > $EXPORT_OPTIONS_PLIST <<EOF
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
      <dict>
          <key>method</key>
          <string>app-store</string>
          <key>teamID</key>
          <string>B2B876ZH94</string>
          <key>signingCertificate</key>
          <string>$(APPLE_CERTIFICATE_SIGNING_IDENTITY)</string>
          <key>provisioningProfiles</key>
          <dict>
              <key>a.loose.screw.tms</key>
              <string>$(APPLE_PROV_PROFILE_UUID)</string>
          </dict>
      </dict>
      </plist>
      EOF

      # Export the IPA using the specified signing identity and provisioning profile
      xcodebuild -exportArchive -archivePath "$ARCHIVE_PATH" -exportOptionsPlist "$EXPORT_OPTIONS_PLIST" -exportPath "$EXPORT_PATH"
    displayName: 'Sign and Export IPA'

  - task: CopyFiles@2
    displayName: "Copy IPA to Artifact Staging Directory"
    inputs:
      contents: '**/*.ipa'
      targetFolder: $(Build.ArtifactStagingDirectory)
      flattenFolders: true

  - task: PublishPipelineArtifact@1
    displayName: "Publish IPA Artifact"
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'client-ios'