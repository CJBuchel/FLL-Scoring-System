jobs:
  - job: LinuxBuild
    displayName: 'Linux Server'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      # get repo artifact
      - template: common-steps/get-repo-artifact.yml
      # pre build steps
      - template: common-steps/get-env-files.yml
      # Get cache if available
      - template: rust-steps/rust-cache.yml
      - template: flutter-steps/flutter-cache.yml
      # Install requirements for rust & flutter
      - template: rust-steps/install-rust.yml
      - template: flutter-steps/install-flutter.yml
      # install release targets
      - template: rust-steps/install-release-targets.yml
      # Build the Rust server
      - template: rust-steps/build-server.yml
      # build the Flutter app
      - template: flutter-steps/build-client-target.yml
        parameters:
          target: 'web'

      # copy and publish block
      # copy the server binary to the staging directory
      - template: common-steps/copy-to-staging.yml
        parameters:
          contents: '**/tms_server'
          flattenFolders: true
      # copy log config to the staging directory
      - template: common-steps/copy-to-staging.yml
        parameters:
          contents: 'log_config/**'
      # copy the web build to the staging directory
      - template: common-steps/copy-to-staging.yml
        parameters:
          contents: 'tms-client/build/web/**'
      # publish
      - template: common-steps/publish-artifact.yml
        parameters:
          artifactName: 'tms-linux'
          shouldArchive: true
          archiveType: 'tar'
          tarCompression: 'gz'
          archiveFile: 'tms.tar.gz'

  - job: WindowsBuild
    displayName: 'Windows Server'
    pool:
      vmImage: 'windows-latest'
    steps:
      # get repo artifact
      - template: common-steps/get-repo-artifact.yml
      # pre build steps
      - template: common-steps/get-env-files.yml
      # Get rust cache if available
      - template: rust-steps/rust-cache.yml
        parameters:
          cargoPath: $(UserProfile)/.cargo
          rustupPath: $(UserProfile)/.rustup
      # Flutter cache
      - template: flutter-steps/flutter-cache.yml
        parameters:
          pubCachePath: $(UserProfile)/AppData/Local/Pub/Cache
      # Install requirements for rust & flutter
      - template: rust-steps/install-rust.yml
      - template: flutter-steps/install-flutter.yml
      # install release targets
      - template: rust-steps/install-release-targets.yml
      # Build the Rust server
      - template: rust-steps/build-server.yml
      # build the Flutter app
      - template: flutter-steps/build-client-target.yml
        parameters:
          target: 'web'

      # copy and publish block
      # copy the server binary to the staging directory
      - template: common-steps/copy-to-staging.yml
        parameters:
          contents: '**/tms_server.exe'
          flattenFolders: true
      # copy log config to the staging directory
      - template: common-steps/copy-to-staging.yml
        parameters:
          contents: 'log_config/**'
      # copy the web build to the staging directory
      - template: common-steps/copy-to-staging.yml
        parameters:
          contents: 'tms-client/build/web/**'
      # publish
      - template: common-steps/publish-artifact.yml
        parameters:
          artifactName: 'tms-windows'
          shouldArchive: true
          archiveType: 'zip'
          archiveFile: 'tms.zip'

  - job: IosBuild
    displayName: 'iOS Client'
    pool:
      vmImage: 'macos-14' # macos-latest isn't always latest (we need xcode 15)
    steps:
      # get repo artifact
      - template: common-steps/get-repo-artifact.yml
      # pre build steps
      - template: common-steps/get-env-files.yml
      # Flutter cache
      - template: flutter-steps/flutter-cache.yml
      # Install requirements for flutter
      - template: flutter-steps/install-flutter.yml
      # install certs
      - template: apple-steps/install-apple-certs.yml
      # build the Flutter app
      - template: flutter-steps/build-client-target.yml
        parameters:
          target: 'ios'
      # build the signed upa
      - template: apple-steps/build-signed-ipa.yml

      # copy and publish block
      # Copy the iOS build to the staging directory
      - template: common-steps/copy-to-staging.yml
        parameters:
          contents: '**/*.ipa'
          flattenFolders: true
      # publish the IPA as an artifact
      - template: common-steps/publish-artifact.yml
        parameters:
          artifactName: 'ios-ipa'

  - job: AndroidBuild
    displayName: 'Android Client'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      # get repo artifact
      - template: common-steps/get-repo-artifact.yml
      # pre build steps
      - template: common-steps/get-env-files.yml
      # Flutter cache
      - template: flutter-steps/flutter-cache.yml
      # Install requirements for flutter
      - template: flutter-steps/install-flutter.yml
      # build the Flutter app
      - template: flutter-steps/build-client-target.yml
        parameters:
          target: 'apk'

      # copy and publish block
      # Copy the APK to the staging directory
      - template: common-steps/copy-to-staging.yml
        parameters:
          contents: '**/flutter-apk/**/*.apk'
          flattenFolders: true
      # publish the APK as an artifact
      - template: common-steps/publish-artifact.yml
        parameters:
          artifactName: 'android-apk'